Script started on 2022-03-03 09:10:47-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="176" LINES="52"]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm 
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 87L, 2546B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  [31m0[m)

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[47;9H[35m'()[m[48;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[49;15H(greater-than ([36mcdr[m ls) v)))))

(check-equal? (greater-than [35m'([m[31m-1[m[35m [m[31m3[m[35m [m[31m6[m[35m [m[31m-3[m[35m [m[31m1[m[35m [m[31m8[m[35m)[m [31m2[m)[52;159H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  [95m0[m)

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[47;9H[38;5;224m'()[m[48;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[49;15H(greater-than ([1m[96mcdr[m ls) v)))))

(check-equal? (greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m)[52;159H1,1[11CTop"lab5-sol.scm" 87L, 2546B[1;1H[?25h[?25l[9;9H[46m([14C)[m[52;159H9,24[9;24H[?25h[?25l[46m([m[7C([14C)[10;4H[46m)[m[52;159H10,[10;4H[?25h[?25l[52;149Hi[10;4H[52;149H [10;4H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H10,4[10CTop[10;4H[?25h[?25l)[10;4H[K[10;3H[46m)[m[52;162H3[10;3H[?25h[?25l[46m([m)[9;1H([10;4H[46m)[m[52;162H4[10;4H[?25h[?25l[46ml[m)l[46m)[m[52;162H5[10;5H[?25h[?25l[46me[m)e[46m)[m[52;162H6[10;6H[?25h[?25l[93mle[m[93m[46mt[m)[93mt[m[46m)[m[52;162H7[10;7H[?25h[?25l[52;162H8[10;8H[?25h[?25l[10;7H[K[10;3H([52;162H7[10;7H[?25h[?25lle[10;6H[K[52;162H6[10;6H[?25h[?25l[10;5H[K[52;162H5[10;5H[?25h[?25l[10;4H[K[52;162H4[10;4H[?25h[?25l[10;3H[K[52;162H3[10;3H[?25h[?25l[52;162H2[10;2H[?25h[?25l[52;162H1[10;1H[?25h[?25l[9;51r[51;1H
[1;52r[9;1H([93mdefine[m (sum-lengths ls)[51;15H[38;5;224m'([m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m)[m)[52;159H[K[52;159H9,25[10CTop[9;9H[46m([14C)[?25h[?25l[10;51r[m[10;1H[L[1;52r[52;159H[K[52;159H10,3[10CTop[9;9H([14C)
  [?25h[?25l([52;162H4[10;4H[?25h[?25ll[52;162H5[10;5H[?25h[?25le[52;162H6[10;6H[?25h[?25l[93mlet[m[52;162H7[10;7H[?25h[?25l[52;162H8[10;8H[?25h[?25l([52;162H9[10;9H[?25h[?25l([52;162H10[10;10H[?25h[?25ls[52;163H1[10;11H[?25h[?25lu[52;163H2[10;12H[?25h[?25lm[52;163H3[10;13H[?25h[?25l[52;163H4[10;14H[?25h[?25l([52;163H5[10;15H[?25h[?25l[95m0[m[52;163H6[10;16H[?25h[?25l)[46m([1C)[m[52;163H7[10;17H[?25h[?25l)[10;9H[46m([msum ([1C)[46m)[m[52;163H8[10;18H[?25h[?25l)[10;8H[46m([m([7C)[46m)[m[52;163H9[10;19H[?25h[?25l[11;51r[11;1H[L[1;52r[52;159H[K[52;159H11,5[10CTop[10;8H([9C)
    [?25h[?25l([52;162H6[11;6H[?25h[?25li[52;162H7[11;7H[?25h[?25l[93mif[m[52;162H8[11;8H[?25h[?25l[52;162H9[11;9H[?25h[?25l([52;162H10[11;10H[?25h[?25ll[52;163H1[11;11H[?25h[?25ls[52;163H2[11;12H[?25h[?25l[52;163H3[11;13H[?25h[?25l[52;163H2[11;12H[?25h[?25l[11;11H[K[52;163H1[11;11H[?25h[?25l[11;10H[K[52;163H0[11;10H[?25h[?25l[11;9H[K[52;162H9 [11;9H[?25h[?25l([52;162H10[11;10H[?25h[?25ll[52;163H1[11;11H[?25h[?25ls[52;163H2[11;12H[?25h[?25l[11;11H[K[52;163H1[11;11H[?25h[?25l[11;10H[K[52;163H0[11;10H[?25h[?25ln[52;163H1[11;11H[?25h[?25lu[52;163H2[11;12H[?25h[?25ll[52;163H3[11;13H[?25h[?25ll[52;163H4[11;14H[?25h[?25l[1m[96mnull?[m[52;163H5[11;15H[?25h[?25l[52;163H6[11;16H[?25h[?25ll[52;163H7[11;17H[?25h[?25ls[52;163H8[11;18H[?25h[?25l)[11;9H[46m([8C)[m[52;163H9[11;19H[?25h[?25l[12;51r[12;1H[L[1;52r[52;159H[K[52;159H12,7[10CTop[11;9H([8C)[12;7H[?25h[?25ls[52;162H8[12;8H[?25h[?25lu[52;162H9[12;9H[?25h[?25lm[52;162H10[12;10H[?25h[?25l[12;9H[K[52;162H9 [12;9H[?25h[?25l[12;8H[K[52;162H8[12;8H[?25h[?25l[12;7H[K[52;162H7[12;7H[?25h[?25l[95m0[m[52;162H8[12;8H[?25h[?25l[13;51r[13;1H[L[1;52r[52;159H[K[52;159H13,7[10CTop[13;7H[?25h[?25l([52;162H8[13;8H[?25h[?25l[1m[96m+[m[52;162H9[13;9H[?25h[?25l[52;162H10[13;10H[?25h[?25ls[52;163H1[13;11H[?25h[?25lu[52;163H2[13;12H[?25h[?25lm[52;163H3[13;13H[?25h[?25l[52;160H2,8 [12;8H[?25h[?25l[52;160H3,13[13;13H[?25h[?25l[13;12H[K[52;163H2[13;12H[?25h[?25l[13;11H[K[52;163H1[13;11H[?25h[?25l[13;10H[K[52;163H0[13;10H[?25h[?25l[95m1[m[52;163H1[13;11H[?25h[?25l[52;160H2,8 [12;8H[?25h[?25l[52;160H1,11[11;11H[?25h[?25l[52;160H0[10;11H[?25h[?25l[52;159H9,11 [9;11H[?25h[?25l[52;159H10,11[10;11H[?25h[?25l[52;163H2[10;12H[?25h[?25l[52;163H3[10;13H[?25h[?25l [46m([1C)[m[52;163H4[10;14H[?25h[?25l[52;163H5[10;15H[?25h[?25l[52;163H6[10;16H[?25h[?25l[10;9H[46m([msum ([1C)[46m)[m[52;163H7[10;17H[?25h[?25l[10;8H[46m([m([7C)[46m)[m[52;163H8[10;18H[?25h[?25l[52;163H9[10;19H[?25h[?25l[10;18H[K[10;8H([46m([7C)[m[52;163H8[10;18H[?25h[?25l[10;17H[K[10;9H(sum [46m([1C)[m[52;163H7[10;17H[?25h[?25l[10;16H[K[10;14H([52;163H6[10;16H[?25h[?25l[10;15H[K[52;163H5[10;15H[?25h[?25l[10;14H[K[52;163H4[10;14H[?25h[?25l[52;163H3[10;13H[?25h[?25l[10;12H[K[52;163H2[10;12H[?25h[?25l[10;11H[K[52;163H1[10;11H[?25h[?25l[10;10H[K[52;163H0[10;10H[?25h[?25l[10;9H[K[52;162H9 [10;9H[?25h[?25l[10;8H[K[52;162H8[10;8H[?25h[?25l[52;162H7[10;7H[?25h[?25lle[10;6H[K[52;162H6[10;6H[?25h[?25l[10;5H[K[52;162H5[10;5H[?25h[?25l[10;4H[K[52;162H4[10;4H[?25h[?25l[10;3H[K[52;162H3[10;3H[?25h[?25l[52;160H1[11;3H[?25h[?25l[52;162H4[11;4H[?25h[?25l[52;162H5[11;5H[?25h[?25l([93mif[m ([1m[96mnull?[m ls)[11;18H[K[52;162H4[11;4H[?25h[?25l([93mif[m ([1m[96mnull?[m ls)[11;17H[K[52;162H3[11;3H[?25h[?25l([93mif[m ([1m[96mnull?[m ls)[11;16H[K[52;162H2[11;2H[?25h[?25l([93mif[m ([1m[96mnull?[m ls)[11;15H[K[52;162H1[11;1H[?25h[?25l[10;51r[51;1H
[1;52r[10;1H  ([93mif[m ([1m[96mnull?[m ls)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H10,3[10CTop[10;3H[?25h[?25l[52;160H1[11;3H[?25h[?25l[52;162H4[11;4H[?25h[?25l[52;162H5[11;5H[?25h[?25l[52;162H6[11;6H[?25h[?25l[52;162H7[11;7H[?25h[?25l[95m0[m[11;7H[K[52;162H6[11;6H[?25h[?25l[95m0[m[11;6H[K[52;162H5[11;5H[?25h[?25l[95m0[m[11;5H[K[52;162H4[11;4H[?25h[?25l[95m0[m[11;4H[K[52;162H3[11;3H[?25h[?25l[95m0[m[11;3H[K[52;162H2[11;2H[?25h[?25l[95m0[m[11;2H[K[52;162H1[11;1H[?25h[?25l[10;51r[51;1H
[1;52r[10;1H  ([93mif[m ([1m[96mnull?[m ls)[95m0[m[52;159H[K[52;159H10,17[9CTop[10;7H[46m([8C)[?25h[?25l[11;51r[m[11;1H[L[1;52r[10;17H[K[11;5H[95m0[m[52;159H[K[52;159H11,5[10CTop[10;7H([8C)
    [?25h[?25l[52;160H2[12;5H[?25h[?25l[52;162H6[12;6H[?25h[?25l[52;162H7[12;7H[?25h[?25l([1m[96m+[m [95m1[m[12;10H[K[52;162H6[12;6H[?25h[?25l([1m[96m+[m [95m1[m[12;9H[K[52;162H5[12;5H[?25h[?25l([1m[96m+[m [95m1[m[12;8H[K[52;162H4[12;4H[?25h[?25l([1m[96m+[m [95m1[m[12;7H[K[52;162H3[12;3H[?25h[?25l([1m[96m+[m [95m1[m[12;6H[K[52;162H2[12;2H[?25h[?25l([1m[96m+[m [95m1[m[12;5H[K[52;162H1[12;1H[?25h[?25l[11;51r[51;1H
[1;52r[11;1H    [95m0[m([1m[96m+[m [95m1[m[52;159H[K[52;159H11,6[10CTop[11;6H[?25h[?25l[12;51r[12;1H[L[1;52r[11;6H[K[12;5H([1m[96m+[m [95m1[m[52;159H[K[52;159H12,5[10CTop[12;5H[?25h[?25l[52;162H9[12;9H[?25h[?25l[52;162H10[12;10H[?25h[?25ls[52;163H1[12;11H[?25h[?25lu[52;163H2[12;12H[?25h[?25lm[52;163H3[12;13H[?25h[?25l-[52;163H4[12;14H[?25h[?25ll[52;163H5[12;15H[?25h[?25le[52;163H6[12;16H[?25h[?25ln[52;163H7[12;17H[?25h[?25lg[52;163H8[12;18H[?25h[?25lt[52;163H9[12;19H[?25h[?25lh[52;162H20[12;20H[?25h[?25ls[52;163H1[12;21H[?25h[?25l[52;163H0[12;20H[?25h[?25l[52;162H19[12;19H[?25h[?25l[52;163H8[12;18H[?25h[?25l[52;163H7[12;17H[?25h[?25l[52;163H6[12;16H[?25h[?25l[52;163H5[12;15H[?25h[?25l[52;163H4[12;14H[?25h[?25l[52;163H5[12;15H[?25h[?25l[52;163H6[12;16H[?25h[?25l[52;163H7[12;17H[?25h[?25l[52;163H8[12;18H[?25h[?25l[52;163H9[12;19H[?25h[?25l[52;162H20[12;20H[?25h[?25l[52;163H1[12;21H[?25h[?25l[52;163H0[12;20H[?25h[?25l[52;162H19[12;19H[?25h[?25l[52;163H8[12;18H[?25h[?25l[52;163H7[12;17H[?25h[?25l[52;163H6[12;16H[?25h[?25l[52;163H5[12;15H[?25h[?25l[52;163H4[12;14H[?25h[?25l[52;163H3[12;13H[?25h[?25l[52;163H2[12;12H[?25h[?25l[52;163H1[12;11H[?25h[?25l[52;163H0[12;10H[?25h[?25l(sum-lengths[52;163H1[12;11H[?25h[?25l[52;163H2[12;12H[?25h[?25l[52;163H3[12;13H[?25h[?25l[52;163H4[12;14H[?25h[?25l[52;163H5[12;15H[?25h[?25l[52;163H6[12;16H[?25h[?25l[52;163H7[12;17H[?25h[?25l[52;163H9[12;19H[?25h[?25l[52;162H20[12;20H[?25h[?25l[52;163H1[12;21H[?25h[?25l[52;163H2[12;22H[?25h[?25l[52;163H3[12;23H[?25h[?25l([52;163H4[12;24H[?25h[?25ll[52;163H5[12;25H[?25h[?25ls[52;163H6[12;26H[?25h[?25l[12;25H[K[52;163H5[12;25H[?25h[?25l[12;24H[K[52;163H4[12;24H[?25h[?25lc[52;163H5[12;25H[?25h[?25ld[52;163H6[12;26H[?25h[?25l[1m[96mcdr[m[52;163H7[12;27H[?25h[?25l[52;163H8[12;28H[?25h[?25l([52;163H9[12;29H[?25h[?25ll[52;162H30[12;30H[?25h[?25ls[52;163H1[12;31H[?25h[?25l)[46m([mls[46m)[m[52;163H2[12;32H[?25h[?25l[12;31H[K[12;28H([52;163H1[12;31H[?25h[?25l[12;30H[K[52;163H0[12;30H[?25h[?25l[12;29H[K[52;162H29[12;29H[?25h[?25l[12;28H[K[52;163H8[12;28H[?25h[?25ll[52;163H9[12;29H[?25h[?25ls[52;162H30[12;30H[?25h[?25l)[12;23H[46m([6C)[m[52;163H1[12;31H[?25h[?25l)[12;10H[46m([m[12C([6C)[46m)[m[52;163H2[12;32H[?25h[?25l)    [46m([m[4C([20C)[46m)[m[52;163H3[12;33H[?25h[?25l)[10;3H[46m([m[12;5H([26C)[46m)[m[52;163H4[12;34H[?25h[?25l)[9;1H[46m([m
  ([12;33H)[46m)[m[52;163H5[12;35H[?25h[52;1H[K[12;34H[?25l[52;149H^[[12;34H[52;149H  [12;35H[52;159H12,34[9CTop[12;34H[?25h[?25l[52;149H:[12;34H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 89L, 2599B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm 
[?2004l--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:15:0
actual:     2
expected:   0
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:16:0
actual:     2
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:17:0
actual:     2
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:25:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:26:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:35:0
actual:     0
expected:   5
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:36:0
actual:     0
expected:   11
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:37:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:38:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:39:0
actual:     0
expected:   -6
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:64:0
actual:     '()
expected:   '(3 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:65:0
actual:     '()
expected:   '(1 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:66:0
actual:     '()
expected:   '(3 6 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:67:0
actual:     '()
expected:   '(3 6 1 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:74:0
actual:     '()
expected:   '(#t #f #f #t #t #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:76:0
actual:     '()
expected:   '(#t #f #f #t #f #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:85:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:86:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:87:0
actual:     '()
expected:   '(-1 -3 1)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:88:0
actual:     '()
expected:   '(-1 -3)
--------------------
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2599B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[106m([m[38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mnull?[m ls)
    [31m0[m
    ([36m+[m [31m1[m (sum-lengths ([36mcdr[m ls))))[106m)[m

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v)))))[52;159H12,34[9CTop[12;34H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[46m([m[93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mnull?[m ls)
    [95m0[m
    ([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ls))))[46m)[m

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H12,34[9CTop"lab5-sol.scm" 89L, 2599B[12;34H[?25h[?25l[52;149H:[12;34H[52;1H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m[23;2t[23;1t[52;1H[K[52;1H[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C[2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2599B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[106m([m[38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mnull?[m ls)
    [31m0[m
    ([36m+[m [31m1[m (sum-lengths ([36mcdr[m ls))))[106m)[m

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v)))))[52;159H12,34[9CTop[12;34H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[46m([m[93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mnull?[m ls)
    [95m0[m
    ([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ls))))[46m)[m

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H12,34[9CTop"lab5-sol.scm" 89L, 2599B[12;34H[?25h[?25l[9;1H([12;34H)[15;27H[38;5;224m[46m()[m[52;160H5,27[15;27H[?25h[?25l[38;5;224m()[m[52;160H4,22[14;22H[?25h[?25l[52;160H5[15;22H[?25h[?25l[9;1H[46m([12;34H)[m[52;160H2,34[12;34H[?25h[?25l[52;149H~@k[12;34H[52;149H   [11;5H[9;1H([12;34H)[52;160H1,5 [11;5H[?25h[?25l[52;149H~@k[11;5H[52;149H   [11;5H[?25h[?25l[52;149H~@k[11;5H[52;149H   [10;16H[10;7H[46m([8C)[m[52;160H0,16[10;16H[?25h[?25l[52;149H~@k[10;16H[52;149H   [10;15H[10;7H([8C)[52;163H5[10;15H[?25h[?25l[52;149H~@k[10;15H[52;149H   [10;14H[52;163H4[10;14H[?25h[?25l[52;149H~@k[10;14H[52;149H   [10;13H[52;163H3[10;13H[?25h[?25l[52;149H~@k[10;13H[52;149H   [10;12H[52;163H2[10;12H[?25h[?25l[52;149H~@k[10;12H[52;149H   [10;11H[52;163H1[10;11H[?25h[?25l[52;149H~@k[10;11H[52;149H   [10;10H[52;163H0[10;10H[?25h[?25l[52;149H~@k[10;10H[52;149H   [10;11H[52;163H1[10;11H[?25h[?25l[52;149H~@k[10;11H[52;149H   [10;12H[52;163H2[10;12H[?25h[?25l[52;149Hi[10;12H[52;149H [10;12H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H10,12[9CTop[10;12H[?25h[?25lnul? ls)[10;16H[K[52;163H1[10;11H[?25h[?25l? ls)[10;15H[K[52;163H0[10;10H[?25h[?25l? ls)[10;14H[K[52;162H9 [10;9H[?25h[?25l? ls)[10;13H[K[10;7H[46m([m? ls[46m)[m[52;162H8[10;8H[?25h[?25lp? l[46ms[m)[10;7H(p? ls[52;162H9[10;9H[?25h[?25la? ls)[52;162H10[10;10H[?25h[?25li? ls)[52;163H1[10;11H[?25h[?25l[1m[96mpair?[m ls)[52;163H2[10;12H[?25h[?25l[52;4H[1m(insert)- VISUAL --[m[52;159H[K[52;159H21,5[10CTop[52;149H^O[21;5H[52;149H1 [21;5H[?25h[?25l[52;149H^[[21;5H[52;149H1 [21;5H[52;150H^[[21;5H[52;149H   [21;5H[52;4H[1mINSERTt --[m[52;13H[K[52;159H21,5[10CTop[21;5H[?25h[52;1H[K[21;4H[?25l[52;149H^[[21;4H[52;149H  [21;5H[20;1H[46m([21;4H)[m[52;159H21,4[10CTop[21;4H[?25h[?25l[52;149H:[21;4H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 89L, 2599B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lcdr: contract violation
  expected: pair?
  given: '()
  context...:
   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/check.rkt:121:16
   "/home/dwalcot1/i471a/submit/lab5/lab5-sol.scm": [running body]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2599B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mpair?[m ls)
    [31m0[m
    ([36m+[m [31m1[m (sum-lengths ([36mcdr[m ls)))))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
[106m([m[38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m[106m)[m

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v)))))[52;159H21,4[10CTop[21;4H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mpair?[m ls)
    [95m0[m
    ([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ls)))))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
[46m([m[93mdefine[m (sum-lengths-tr ls)
  [95m0[m[46m)[m

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H21,4[10CTop"lab5-sol.scm" 89L, 2599B[21;4H[?25h[?25l[17;12H[46m([34C)[m


([21;4H)[52;159H17,47[17;47H[?25h[?25l[17;12H([34C)[25;36H[38;5;224m[46m([3C)[m[52;159H25,40[25;40H[?25h[?25l[38;5;224m([3C)[m[52;159H14,24[14;24H[?25h[?25l[52;160H0,13[10;13H[?25h[?25l[52;160H1,5 [11;5H[?25h[?25l[52;149Hi[11;5H[52;149H [11;5H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H11,5[10CTop[11;5H[?25h[?25l[52;162H6[11;6H[?25h[?25l[11;5H[K[52;162H5[11;5H[?25h[?25l[52;162H4[11;4H[?25h[?25l[52;162H3[11;3H[?25h[?25l[52;162H2[11;2H[?25h[?25l[52;162H1[11;1H[?25h[?25l[10;51r[51;1H
[1;52r[10;3H([93mif[m ([1m[96mpair?[m ls)[52;159H[K[52;159H10,17[9CTop[10;7H[46m([8C)[?25h[?25l[9;1H([m[10;7H([8C)[11;34H[46m)[m[52;160H1,35[11;35H[?25h[?25l[11;34H[K[9;1H(
  [46m([11;33H)[m[52;163H4[11;34H[?25h[?25l[11;33H[K[10;3H(
    [46m([26C)[m[52;163H3[11;33H[?25h[?25l[12;51r[12;1H[L[1;52r[52;159H[K[52;159H12,5[10CTop[11;5H([26C)
    [?25h[?25l[95m0[m[52;162H6[12;6H[?25h[?25l)[10;3H[46m([12;6H)[m[52;162H7[12;7H[?25h[?25l)[9;1H[46m([m
  ([12;6H)[46m)[m[52;162H8[12;8H[?25h[?25l[9;1H([11;5H[46m([26C)[m[12;7H)[52;160H1,33[11;33H[?25h[52;1H[K[11;32H[?25l[52;149H^[[11;32H[52;149H  [11;33H[52;159H11,32[9CTop[11;32H[?25h[?25l[52;149H:[11;32H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 89L, 2599B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:15:0
actual:     2
expected:   0
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:16:0
actual:     2
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:17:0
actual:     2
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:25:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:26:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:35:0
actual:     0
expected:   5
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:36:0
actual:     0
expected:   11
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:37:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:38:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:39:0
actual:     0
expected:   -6
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:64:0
actual:     '()
expected:   '(3 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:65:0
actual:     '()
expected:   '(1 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:66:0
actual:     '()
expected:   '(3 6 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:67:0
actual:     '()
expected:   '(3 6 1 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:74:0
actual:     '()
expected:   '(#t #f #f #t #t #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:76:0
actual:     '()
expected:   '(#t #f #f #t #f #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:85:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:86:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:87:0
actual:     '()
expected:   '(-1 -3 1)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:88:0
actual:     '()
expected:   '(-1 -3)
--------------------
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2599B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mpair?[m ls)
    [106m([m[36m+[m [31m1[m (sum-lengths ([36mcdr[m ls))[106m)[m
    [31m0[m))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v)))))[52;159H11,32[9CTop[11;32H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mpair?[m ls)
    [46m([m[1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ls))[46m)[m
    [95m0[m))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H11,32[9CTop"lab5-sol.scm" 89L, 2599B[11;32H[?25h[?25l[9;1H[46m([m[11;5H([26C)[12;7H[46m)[m[52;160H2,7 [12;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[50;1H(check-equal? (greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m)[51;15H[38;5;224m'([m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m)[m)[52;1H[K[52;159H12,7[11C7%[9;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H(check-equal? (greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m)[50;15H[38;5;224m'([m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#t[m[38;5;224m)[m)
(check-equal? (greater-than [38;5;224m'()[m) [38;5;224m'()[m)[52;159H[K[52;159H12,7[10C15%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[3;7H)[50;1H[96m;; return those elements in list ls which are greater than v[m
([93mdefine[m (get-greater-than ls (v [95m0[m))[52;159H[K[52;159H15,10[9C23%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;3H[38;5;224m'()[m)

(check-equal? (get-greater-than [38;5;224m'()[m [95m3[m) [38;5;224m'()[m)[52;159H[K[52;159H18,0-1[8C31%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[5;1H[46m([6;4H)[m[49;1H(check-equal? (get-greater-than [38;5;224m'([m[95m3[m[38;5;224m [m[95m2[m[38;5;224m [m[95m-2[m[38;5;224m)[m [95m1[m) [38;5;224m'([m[95m3[m[38;5;224m [m[95m2[m[38;5;224m)[m)
(check-equal? (get-greater-than [38;5;224m'([m[95m1[m[38;5;224m [m[95m2[m[38;5;224m [m[95m-2[m[38;5;224m)[m) [38;5;224m'([m[95m1[m[38;5;224m [m[95m2[m[38;5;224m)[m)
(check-equal? (get-greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m) [38;5;224m'([m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m8[m[38;5;224m)[m)[52;159H[K[52;159H21,4[10C39%[6;4H[?25h[?25l[1;51r[1;1H[3M[1;52r[2;1H([3;4H)[49;1H(check-equal? (get-greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m) [38;5;224m'([m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m)

[96m;;map elements of ls to #t or #f depending on whether or not[m[52;159H[K[52;159H24,10[9C47%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[96m;;the element is > v or not > v[m
([93mdefine[m (less-than ls (v [95m0[m))
  [38;5;224m'()[m)[52;159H[K[52;159H27,0-1[8C55%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[50;1H(check-equal? (less-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m)[51;15H[38;5;224m'([m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m)[m)[52;159H[K[52;159H30,10[9C63%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H(check-equal? (less-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m)[50;15H[38;5;224m'([m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#f[m[38;5;224m)[m)
(check-equal? (less-than [38;5;224m'()[m) [38;5;224m'()[m)[52;159H[K[52;159H33,0-1[8C71%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[50;1H[96m;; return those elements in list ls which are less than v[m
([93mdefine[m (get-less-than ls (v [95m0[m))[52;159H[K[52;159H36,10[9C78%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;3H[38;5;224m'()[m)

(check-equal? (get-less-than [38;5;224m'()[m [95m3[m) [38;5;224m'()[m)[52;159H[K[52;159H39,10[9C86%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H(check-equal? (get-less-than [38;5;224m'([m[95m3[m[38;5;224m [m[95m2[m[38;5;224m [m[95m-2[m[38;5;224m)[m [95m1[m) [38;5;224m'([m[95m-2[m[38;5;224m)[m)
(check-equal? (get-less-than [38;5;224m'([m[95m1[m[38;5;224m [m[95m2[m[38;5;224m [m[95m-2[m[38;5;224m)[m) [38;5;224m'([m[95m-2[m[38;5;224m)[m)
(check-equal? (get-less-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m) [38;5;224m'([m[95m-1[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m)[m)[52;159H[K[52;159H42,0-1[8C94%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H(check-equal? (get-less-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m) [38;5;224m'([m[95m-1[m[38;5;224m [m[95m-3[m[38;5;224m)[m)

[94m~                                                                                                                                                                               [m[52;159H[K[52;159H45,10[9CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                                                                                               [50;1H~                                                                                                                                                                               [51;1H~                                                                                                                                                                               [m[52;159H[K[52;159H48,10[9CBot[6;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[2;1H[96m;;Exercise 2[m[52;159H[K[52;159H48,10[9CBot[9;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)[52;159H[K[52;159H48,10[9C94%[12;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)[52;159H[K[52;159H48,10[9C86%[15;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H([93mdefine[m (poly-eval x coeffs)
  [95m0[m)[52;159H[K[52;159H48,10[9C78%[18;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m[52;159H[K[52;159H48,10[9C71%[21;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)[52;159H[K[52;159H48,10[9C63%[24;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[2;1H(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)[52;159H[K[52;159H48,10[9C55%[27;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)[52;159H[K[52;159H48,10[9C47%[30;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)[52;159H[K[52;159H48,10[9C39%[33;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[2;1H(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)[52;159H[K[52;159H48,10[9C31%[36;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;3H([93mif[m ([1m[96mpair?[m ls)
    ([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ls)))
    [95m0[m))[52;159H[K[52;159H48,10[9C23%[39;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H[96m;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)[52;159H[K[52;159H48,10[9C15%[42;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H(require rackunit)

[96m;;Exercise 1[m[52;159H[K[52;159H48,10[10C7%[45;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H#!/usr/bin/env racket

#lang racket[52;159H[K[52;159H46,10[9CTop[46;10H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;159H10,4 [10;4H[?25h[?25l[46m([12;6H)[m[52;162H3[10;3H[?25h[?25l[52;149H2[10;4H[48;5;242m([m[12;6H)[52;1H[1m-- VISUAL --[m[52;149H[K[52;149H2[10;4H[52;159H10,4[10CTop[10;4H[?25h[?25l[52;149H3[10;5H[93m[48;5;242mi[m[52;162H5[10;5H[?25h[?25l[52;149H2[11;6H[10;5H[93m[48;5;242mf[m[48;5;242m ([m[1m[96m[48;5;242mpair?[m[48;5;242m ls) 
    ([m[52;160H1,6[11;6H[?25h[?25l[1C[1m[96m[48;5;242m+[m [52;162H7[11;7H[?25h[?25l[52;149H3[12;7H[9;1H[46m([m[11;7H[48;5;242m [m[95m[48;5;242m1[m[48;5;242m (sum-lengths ([m[1m[96m[48;5;242mcdr[m[48;5;242m ls))) 
    [m[95m[48;5;242m0[m[48;5;242m)[m[46m)[m[52;160H2[12;7H[?25h[?25l[1C[9;1H([12;7H[48;5;242m)[m[52;162H8[12;8H[?25h[?25l[9;1H[46m([12;7H)[m[52;162H7[12;7H[?25h[?25l[?25h[?25l[52;149H [12;7H[10;3H([93mif[m ([1m[96mpair?[m ls)[10;17H[K[11;1H    ([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ls)))[11;33H[K[12;1H    [95m0[m)[52;1H[K[52;159H12,7[10CTop[12;7H[?25h[?25l[9;1H([11;5H[46m([26C)[m[12;7H)[52;160H1,5[11;5H[?25h[?25l([26C)[52;160H0,13[10;13H[?25h[?25l[52;149Hi[10;13H[52;149H [10;13H[52;1H[1m-- INSERT --[m[52;159H[K[52;159H10,13[9CTop[10;13H[?25h[?25l[52;163H2[10;12H[?25h[?25lpai? ls)[10;16H[K[52;163H1[10;11H[?25h[?25l? ls)[10;15H[K[52;163H0[10;10H[?25h[?25l? ls)[10;14H[K[52;162H9 [10;9H[?25h[?25l? ls)[10;13H[K[10;7H[46m([m? ls[46m)[m[52;162H8[10;8H[?25h[?25ln? l[46ms[m)[10;7H(n? ls[52;162H9[10;9H[?25h[?25lu? ls)[52;162H10[10;10H[?25h[?25ll? ls)[52;163H1[10;11H[?25h[?25l[1m[96mnull?[m ls)[52;163H2[10;12H[?25h[?25l[46m([8C)[m[52;163H7[10;17H[?25h[?25l[11;51r[11;1H[L[1;52r[52;159H[K[52;159H11,5[10CTop[10;7H([8C)
    [?25h[?25l[95m0[m[52;162H6[11;6H[?25h[?25l[9;1H[46m([13;7H)[m[52;160H3,8[13;8H[?25h[?25l[13;7H[K[9;1H(
  [46m([13;6H)[m[52;162H7[13;7H[?25h[?25l[13;6H[K[10;3H([52;162H6[13;6H[?25h[?25l[13;5H[K[52;162H5[13;5H[?25h[?25l[52;162H4[13;4H[?25h[?25l[52;162H3[13;3H[?25h[?25l[52;162H2[13;2H[?25h[?25l[52;162H1[13;1H[?25h[?25l[12;51r[51;1H
[1;52r[12;5H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ls)))[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H12,33[9CTop[12;5H[46m([26C)[?25h[?25l[m)[10;3H[46m([m[12;5H([26C)[46m)[m[52;163H4[12;34H[?25h[?25l)[9;1H[46m([m
  ([12;33H)[46m)[m[52;163H5[12;35H[?25h[52;1H[K[12;34H[?25l[52;149H^[[12;34H[52;149H  [12;35H[52;159H12,34[9CTop[12;34H[?25h[?25l[9;1H([12;34H)[16;1H[46m([40C)[m[52;160H6,42[16;42H[?25h[?25l([40C)[17;12H[46m([34C)[m[52;160H7,47[17;47H[?25h[?25l[52;149H~@k[17;47H[52;149H   [17;46H[17;12H([13C[38;5;224m[46m([19C)[m)[52;163H6[17;46H[?25h[?25l[15;1H[46m([34C)[m[17;26H[38;5;224m([19C)[m[52;160H5,3[15;36H[?25h[?25l([34C)[52;160H1,5 [11;5H[?25h[?25l[52;149Hi[11;5H[52;149H [11;5H[52;1H[1m-- INSERT --[m[52;159H[K[52;159H11,5[10CTop[11;5H[?25h[?25l[52;162H6[11;6H[?25h[?25l[11;5H[K[52;162H5[11;5H[?25h[?25l[52;162H4[11;4H[?25h[?25l[52;162H3[11;3H[?25h[?25l[52;162H2[11;2H[?25h[?25l[52;162H1[11;1H[?25h[?25l[10;51r[51;1H
[1;52r[10;3H([93mif[m ([1m[96mnull?[m ls)[52;159H[K[52;159H10,17[9CTop[10;7H[46m([8C)[?25h[?25l[m[10;16H[K[10;7H([52;163H6[10;16H[?25h[?25l)[10;7H[46m([8C)[m[52;163H7[10;17H[?25h[?25l[52;163H6[10;16H[?25h[?25l[10;7H([8C)[52;163H5[10;15H[?25h[?25l[52;163H4[10;14H[?25h[?25l[52;163H3[10;13H[?25h[?25l[52;163H2[10;12H[?25h[?25lnul? ls)[10;16H[K[52;163H1[10;11H[?25h[?25l? ls)[10;15H[K[52;163H0[10;10H[?25h[?25l? ls)[10;14H[K[52;162H9 [10;9H[?25h[?25l? ls)[10;13H[K[10;7H[46m([m? ls[46m)[m[52;162H8[10;8H[?25h[?25lp? l[46ms[m)[10;7H(p? ls[52;162H9[10;9H[?25h[?25la? ls)[52;162H10[10;10H[?25h[?25li? ls)[52;163H1[10;11H[?25h[?25l[1m[96mpair?[m ls)[52;163H2[10;12H[?25h[?25l[52;160H1,20[11;20H[?25h[?25l[52;160H2,1 [12;1H[?25h[?25l[11;10H[46m([20C)[m[52;160H1,31[11;31H[?25h[?25l[9;1H[46m([m[11;10H([20C)))[46m)[m[52;163H5[11;35H[?25h[?25l[11;34H[K[9;1H(
  [46m([11;33H)[m[52;163H4[11;34H[?25h[?25l[11;33H[K[10;3H(
    [46m([26C)[m[52;163H3[11;33H[?25h[?25l[52;163H2[11;32H[?25h[?25l    ([4C[46m([20C)[m)[52;163H1[11;31H[?25h[?25l[11;10H([12C[46m([6C)[m)[52;163H0[11;30H[?25h[?25l[11;10H[46m([m[12C([6C)[46m)[m[52;163H1[11;31H[?25h[?25l[11;10H([12C[46m([6C)[m)[52;163H0[11;30H[?25h[?25l[11;23H([6C)[52;162H29[11;29H[?25h[?25l[52;163H8[11;28H[?25h[?25l[52;163H7[11;27H[?25h[?25l[52;163H6[11;26H[?25h[?25l[52;163H5[11;25H[?25h[?25l[52;163H6[11;26H[?25h[?25l[52;163H7[11;27H[?25h[?25l[52;163H8[11;28H[?25h[?25l[52;163H9[11;29H[?25h[?25l[46m([6C)[m[52;162H30[11;30H[?25h[?25l)[11;32H[K[11;29H[46m)[m)[52;162H29[11;29H[?25h[?25l)[11;31H[K[11;28H[46m)[m)[52;163H8[11;28H[?25h[?25l[46m([m)))[11;23H([5C[46m)[m[52;163H9[11;29H[?25h[?25l[3C)[11;23H[46m([m[4C()[46m)[m[52;162H30[11;30H[?25h[?25l[11;23H([4C[46m()[m)[52;162H29[11;29H[?25h[?25l[46mc[m))))c[46m)[m[52;162H30[11;30H[?25h[?25l[46md[m))))d[46m)[m[52;163H1[11;31H[?25h[?25l[1m[96mcd[m[1m[96m[46mr[m))))[1m[96mr[m[46m)[m[52;163H2[11;32H[?25h[?25l[46m [m)))) [46m)[m[52;163H3[11;33H[?25h[?25l[46ml[m))))l[46m)[m[52;163H4[11;34H[?25h[?25l[46ms[m))))s[46m)[m[52;163H5[11;35H[?25h[?25l[11;23H[46m([m[4C([6C)[46m)[m[52;163H6[11;36H[?25h[?25l[11;10H[46m([m[12C([12C)[46m)[m[52;163H7[11;37H[?25h[?25l    [46m([m[4C([26C)[46m)[m[52;163H8[11;38H[?25h[?25l[52;163H9[11;39H[?25h[?25l[12;51r[12;1H[L[1;52r[52;159H[K[52;159H12,5[10CTop[11;5H([32C)
    [?25h[?25l[95m0[m[52;162H6[12;6H[?25h[?25l)[10;3H[46m([12;6H)[m[52;162H7[12;7H[?25h[?25l)[9;1H[46m([m
  ([12;6H)[46m)[m[52;162H8[12;8H[?25h[52;1H[K[12;7H[?25l[52;149H^[[12;7H[52;149H  [12;8H[52;159H12,7[10CTop[12;7H[?25h[?25l[52;149H:[12;7H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 89L, 2605B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:15:0
actual:     1
expected:   0
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:16:0
actual:     1
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:17:0
actual:     1
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:25:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:26:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:35:0
actual:     0
expected:   5
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:36:0
actual:     0
expected:   11
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:37:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:38:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:39:0
actual:     0
expected:   -6
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:64:0
actual:     '()
expected:   '(3 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:65:0
actual:     '()
expected:   '(1 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:66:0
actual:     '()
expected:   '(3 6 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:67:0
actual:     '()
expected:   '(3 6 1 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:74:0
actual:     '()
expected:   '(#t #f #f #t #t #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:76:0
actual:     '()
expected:   '(#t #f #f #t #f #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:85:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:86:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:87:0
actual:     '()
expected:   '(-1 -3 1)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:88:0
actual:     '()
expected:   '(-1 -3)
--------------------
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2605B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[106m([m[38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mpair?[m ls)
    ([36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ls))))
    [31m0[m)[106m)[m

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v)))))[52;159H12,7[10CTop[12;7H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[46m([m[93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mpair?[m ls)
    ([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))
    [95m0[m)[46m)[m

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H12,7[10CTop"lab5-sol.scm" 89L, 2605B[12;7H[?25h[?25l[52;149H~@k[12;7H[52;149H   [11;7H[9;1H([12;7H)[52;160H1[11;7H[?25h[?25l[52;149H~@k[11;7H[52;149H   [10;7H[46m([8C)[m[52;160H0[10;7H[?25h[?25l[52;149H~@k[10;7H[52;149H   [10;8H([8C)[52;162H8[10;8H[?25h[?25l[52;149H~@k[10;8H[52;149H   [10;9H[52;162H9[10;9H[?25h[?25l[52;149H~@k[10;9H[52;149H   [10;10H[52;162H10[10;10H[?25h[?25l[52;149H~@k[10;10H[52;149H   [10;11H[52;163H1[10;11H[?25h[?25l[52;149H~@k[10;11H[52;149H   [10;12H[52;163H2[10;12H[?25h[?25l[52;149H~@k[10;12H[52;149H   [10;13H[52;163H3[10;13H[?25h[?25l[52;149H~@k[10;13H[52;149H   [10;14H[52;163H4[10;14H[?25h[?25l[52;149H~@k[10;14H[52;149H   [10;15H[52;163H5[10;15H[?25h[?25l[52;149H~@k[10;15H[52;149H   [10;16H[10;7H[46m([8C)[m[52;163H6[10;16H[?25h[?25l[52;149H~@k[10;16H[52;149H   [10;16H[?25h[?25l[52;149H~@k[10;16H[52;149H   [10;16H[?25h[?25l[52;149Hi[10;16H[52;149H [10;16H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H10,16[9CTop[10;16H[?25h[?25l[52;163H7[10;17H[?25h[?25l[10;7H([8C)[52;160H1[11;17H[?25h[?25l[52;163H8[11;18H[?25h[?25l[52;163H9[11;19H[?25h[?25l[52;162H20[11;20H[?25h[?25l[52;163H1[11;21H[?25h[?25l[52;163H2[11;22H[?25h[?25l [46m([12C)[m[52;163H3[11;23H[?25h[?25l[52;163H4[11;24H[?25h[?25l([12C)[52;163H5[11;25H[?25h[?25l[52;163H6[11;26H[?25h[?25l[52;163H7[11;27H[?25h[?25l [46m([6C)[m[52;163H8[11;28H[?25h[?25l[46ms[m([1m[96mcdr[m l[46ms[m))))[11;28Hs[46m([m[5Cs[46m)[m[52;163H9[11;29H[?25h[?25l[46mu[m([1m[96mcdr[m l[46ms[m))))[11;29Hu[46m([m[5Cs[46m)[m[52;162H30[11;30H[?25h[?25l[46mm[m([1m[96mcdr[m l[46ms[m))))[11;30Hm[46m([m[5Cs[46m)[m[52;163H1[11;31H[?25h[?25l[46m-[m([1m[96mcdr[m l[46ms[m))))[11;31H-[46m([m[5Cs[46m)[m[52;163H2[11;32H[?25h[?25l[46ml[m([1m[96mcdr[m l[46ms[m))))[11;32Hl[46m([m[5Cs[46m)[m[52;163H3[11;33H[?25h[?25l[46me[m([1m[96mcdr[m l[46ms[m))))[11;33He[46m([m[5Cs[46m)[m[52;163H4[11;34H[?25h[?25l[46mn[m([1m[96mcdr[m l[46ms[m))))[11;34Hn[46m([m[5Cs[46m)[m[52;163H5[11;35H[?25h[?25l[46mg[m([1m[96mcdr[m l[46ms[m))))[11;35Hg[46m([m[5Cs[46m)[m[52;163H6[11;36H[?25h[?25l[46mt[m([1m[96mcdr[m l[46ms[m))))[11;36Ht[46m([m[5Cs[46m)[m[52;163H7[11;37H[?25h[?25l[46mh[m([1m[96mcdr[m l[46ms[m))))[11;37Hh[46m([m[5Cs[46m)[m[52;163H8[11;38H[?25h[?25l[46ms[m([1m[96mcdr[m l[46ms[m))))[11;38Hs[46m([m[5Cs[46m)[m[52;163H9[11;39H[?25h[?25l[52;162H40[11;40H[?25h[?25l[52;162H39[11;39H[?25h[?25l[46m [m([1m[96mcdr[m l[46ms[m))))[11;39H [46m([m[5Cs[46m)[m[52;162H40[11;40H[?25h[?25l[52;163H1[11;41H[?25h[?25l([6C)[52;163H2[11;42H[?25h[?25l[52;163H3[11;43H[?25h[?25l[52;163H4[11;44H[?25h[?25l[52;163H5[11;45H[?25h[?25l[52;163H6[11;46H[?25h[?25l[46m([6C)[m[52;163H7[11;47H[?25h[?25l[11;23H[46m([m[16C([6C)[46m)[m[52;163H8[11;48H[?25h[?25l[11;23H([16C[46m([6C)[m)[52;163H7[11;47H[?25h[?25l[11;40H([6C)[52;163H6[11;46H[?25h[?25l[52;163H5[11;45H[?25h[?25l[52;163H4[11;44H[?25h[?25l[52;163H3[11;43H[?25h[?25l[52;163H2[11;42H[?25h[?25l[46m([6C)[m[52;163H1[11;41H[?25h[?25l[52;163H0[11;40H[?25h[?25l([6C)[52;162H39[11;39H[?25h[?25l[52;163H8[11;38H[?25h[?25l[52;163H7[11;37H[?25h[?25l[52;163H6[11;36H[?25h[?25l[52;163H5[11;35H[?25h[?25l[52;163H4[11;34H[?25h[?25l[52;163H3[11;33H[?25h[?25l[52;163H2[11;32H[?25h[?25l[52;163H1[11;31H[?25h[?25l[52;163H0[11;30H[?25h[?25l[52;162H29[11;29H[?25h[?25l[52;163H8[11;28H[?25h[?25l(sum-lengths ([1m[96mcdr[m ls))))[11;28H[46m([20C)[m[52;163H9[11;29H[?25h[?25l[11;10H[46m([m[17C([20C))[46m)[m[52;162H51[11;51H[?25h[?25l[1C)    [46m([m[4C([40C)[46m)[m[52;163H2[11;52H[?25h[52;1H[K[11;51H[?25l[52;149H^[[11;51H[52;149H  [11;52H    ([4C[46m([40C)[m)[52;159H11,51[9CTop[11;51H[?25h[?25l[52;149H:[11;51H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 89L, 2619B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lcdr: contract violation
  expected: pair?
  given: 0
  context...:
   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/check.rkt:121:16
   "/home/dwalcot1/i471a/submit/lab5/lab5-sol.scm": [running body]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2619B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mpair?[m ls)
    ([36m+[m [31m1[m [106m([msum-lengths ([36mcdr[m (sum-lengths ([36mcdr[m ls)))[106m)[m)
    [31m0[m))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v)))))[52;159H11,51[9CTop[11;51H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mpair?[m ls)
    ([1m[96m+[m [95m1[m [46m([msum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)))[46m)[m)
    [95m0[m))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H11,51[9CTop"lab5-sol.scm" 89L, 2619B[11;51H[?25h[?25l    [46m([m[4C([40C)[46m)[m[52;163H2[11;52H[?25h[?25l[52;149H~@k[11;52H[52;149H   [11;51H    ([4C[46m([40C)[m)[52;163H1[11;51H[?25h[?25l[52;149H~@k[11;51H[52;149H   [12;7H[9;1H[46m([m[11;10H([40C)[12;7H[46m)[m[52;160H2,7 [12;7H[?25h[?25l[52;149H~@k[12;7H[52;149H   [11;51H[9;1H([11;10H[46m([40C)[m[12;7H)[52;160H1,51[11;51H[?25h[?25l[52;149H~@k[11;51H[52;149H   [11;50H[11;10H([12C[46m([26C)[m)[52;163H0[11;50H[?25h[?25l[52;149H~@k[11;50H[52;149H   [11;49H[11;23H([4C[46m([20C)[m)[52;162H49[11;49H[?25h[?25l[52;149H~@k[11;49H[52;149H   [11;48H[11;28H([12C[46m([6C)[m)[52;163H8[11;48H[?25h[?25l[52;149H~@k[11;48H[52;149H   [11;49H[11;28H[46m([m[12C([6C)[46m)[m[52;163H9[11;49H[?25h[?25l[52;149H~@k[11;49H[52;149H   [11;50H[11;23H[46m([m[4C([20C)[46m)[m[52;162H50[11;50H[?25h[?25l[52;149H~@k[11;50H[52;149H   [11;51H[11;10H[46m([m[12C([26C)[46m)[m[52;163H1[11;51H[?25h[?25l[52;149H~@k[11;51H[52;149H   [11;52H    [46m([m[4C([40C)[46m)[m[52;163H2[11;52H[?25h[?25l[52;149H~@k[11;52H[52;149H   [11;52H[?25h[?25l[52;149HL[11;52H[52;149H [46;1H[11;5H([46C)[46;1H[46m([51;43H)[m[52;159H46,1 [46;1H[?25h[?25l[52;149Hx[46;1H[52;149H [46;1H[52;149Hdl[46;1H[52;149H  [46;1H[93mdefine[m greater-than[46;20H[K[51;43H)[46;1H[?25h[?25l[52;149Hi[46;1H[52;149H [46;1H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H46,1[10CTop[46;1H[?25h[?25l([93mdefine[m greater-than[46m([51;43H)[m[52;162H2[46;2H[?25h[52;1H[K[46;1H[?25l[52;149H^[[46;1H[52;149H  [46;2H[52;159H46,1[10CTop[46;1H[?25h[?25l[52;149H:[46;1H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 89L, 2619B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C[2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2619B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mpair?[m ls)
    ([36m+[m [31m1[m (sum-lengths ([36mcdr[m (sum-lengths ([36mcdr[m ls)))))
    [31m0[m))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
[106m([m[38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v))))[106m)[m[52;159H46,1[10CTop[46;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mpair?[m ls)
    ([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)))))
    [95m0[m))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
[46m([m[93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v))))[46m)[m[52;159H46,1[10CTop"lab5-sol.scm" 89L, 2619B[46;1H[?25h[?25l([51;43H)[52;159H10,13[10;13H[?25h[?25l  [46m([12;6H)[m[52;162H3 [10;3H[?25h[?25l([12;6H)[52;162H13[10;13H[?25h[?25l[52;163H1[10;11H[?25h[?25l[52;149Hi[10;11H[52;149H [10;11H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H10,11[9CTop[10;11H[?25h[?25lpar? ls)[10;16H[K[52;163H0[10;10H[?25h[?25lr? ls)[10;15H[K[52;162H9 [10;9H[?25h[?25lr? ls)[10;14H[K[10;7H[46m([mr? ls[46m)[m[52;162H8[10;8H[?25h[?25lnr? l[46ms[m)[10;7H(nr? ls[52;162H9[10;9H[?25h[?25lur? ls)[52;162H10[10;10H[?25h[?25llr? ls)[52;163H1[10;11H[?25h[?25llr? ls)[52;163H2[10;12H[?25h[?25l[46m([9C)[m[52;163H8[10;18H[?25h[?25l[10;7H([9C)[52;163H3[10;13H[?25h[?25l[1m[96mnull?[m ls)[10;17H[K[52;163H2[10;12H[?25h[?25l[46m([8C)[m[52;163H7[10;17H[?25h[?25l[11;51r[11;1H[L[1;52r[52;159H[K[52;159H11,5[10CTop[10;7H([8C)
    [?25h[?25l[95m0[m[52;162H6[11;6H[?25h[?25l[9;1H[46m([13;7H)[m[52;160H3,8[13;8H[?25h[?25l[13;7H[K[9;1H(
  [46m([13;6H)[m[52;162H7[13;7H[?25h[?25l[13;6H[K[10;3H([52;162H6[13;6H[?25h[?25l[13;5H[K[52;162H5[13;5H[?25h[?25l[52;162H4[13;4H[?25h[?25l[52;162H3[13;3H[?25h[?25l[52;162H2[13;2H[?25h[?25l[52;162H1[13;1H[?25h[?25l[12;51r[51;1H
[1;52r[12;5H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)))))[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H12,53[9CTop[12;5H[46m([46C)[?25h[?25l[m    ([46C)[52;160H1,6 [11;6H[?25h[?25l[12;51r[12;1H[L[1;52r[52;159H[K[52;159H12,5[10CTop[12;5H[?25h[?25li[52;162H6[12;6H[?25h[?25l[93mif[m[52;162H7[12;7H[?25h[?25l[52;162H8[12;8H[?25h[?25l([52;162H9[12;9H[?25h[?25lp[52;162H10[12;10H[?25h[?25la[52;163H1[12;11H[?25h[?25li[52;163H2[12;12H[?25h[?25lr[52;163H3[12;13H[?25h[?25l[12;12H[K[52;163H2[12;12H[?25h[?25l[12;11H[K[52;163H1[12;11H[?25h[?25l[12;10H[K[52;163H0[12;10H[?25h[?25l[12;9H[K[52;162H9 [12;9H[?25h[?25l[12;8H[K[52;162H8[12;8H[?25h[?25l[52;162H7[12;7H[?25h[?25li[12;6H[K[52;162H6[12;6H[?25h[?25l[12;5H[K[52;162H5[12;5H[?25h[?25l[52;162H4[12;4H[?25h[?25l[52;162H3[12;3H[?25h[?25l[52;162H2[12;2H[?25h[?25l[52;162H1[12;1H[?25h[?25l[11;51r[51;1H
[1;52r[11;5H[95m0[m[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H11,6[10CTop[11;6H[?25h[?25l
    [46m([46C)[m[52;160H2,53[12;53H[?25h[?25l[52;163H2[12;52H[?25h[?25l    ([46C)[52;160H1,6 [11;6H[?25h[?25l[12;51r[12;1H[L[1;52r[52;159H[K[52;159H12,5[10CTop[12;5H[?25h[?25li[52;162H6[12;6H[?25h[?25l[93mif[m[52;162H7[12;7H[?25h[?25l[52;162H8[12;8H[?25h[?25l[52;162H7[12;7H[?25h[?25li[12;6H[K[52;162H6[12;6H[?25h[?25l[12;5H[K[52;162H5[12;5H[?25h[?25l([52;162H6[12;6H[?25h[?25li[52;162H7[12;7H[?25h[?25l[93mif[m[52;162H8[12;8H[?25h[?25l[52;162H9[12;9H[?25h[?25l([52;162H10[12;10H[?25h[?25lp[52;163H1[12;11H[?25h[?25la[52;163H2[12;12H[?25h[?25li[52;163H3[12;13H[?25h[?25lr[52;163H4[12;14H[?25h[?25l[1m[96mpair?[m[52;163H5[12;15H[?25h[?25l[52;163H6[12;16H[?25h[?25ll[52;163H7[12;17H[?25h[?25ls[52;163H8[12;18H[?25h[?25l)[12;9H[46m([8C)[m[52;163H9[12;19H[?25h[?25l[12;9H([8C)
    [46m([46C)[m[52;160H3,5 [13;5H[?25h[?25l([1m[96m[46m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)[13;52H[K[13;4H[46m([m[1m[96m+[m [44C[46m)[m[52;162H4[13;4H[?25h[?25l([1m[96m[46m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)[13;51H[K[13;3H[46m([m[1m[96m+[m [44C[46m)[m[52;162H3[13;3H[?25h[?25l([1m[96m[46m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)[13;50H[K[13;2H[46m([m[1m[96m+[m [44C[46m)[m[52;162H2[13;2H[?25h[?25l([1m[96m[46m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)[13;49H[K[13;1H[46m([m[1m[96m+[m [44C[46m)[m[52;162H1[13;1H[?25h[?25l[12;51r[51;1H
[1;52r[12;1H    ([93mif[m ([1m[96mpair?[m ls)([1m[96m+[m [95m1[m [18C(sum-lengths ([1m[96mcdr[m ls)))))[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H12,19[9CTop[12;19H[46m([46C)[12;19H[?25h[?25l[13;51r[m[13;1H[L[1;52r[12;19H[K[13;7H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)))))[52;159H[K[52;159H13,7[10CTop[13;7H[46m([46C)[13;7H[?25h[?25l[m[52;162H55[13;55H[?25h[?25l)[12;5H[46m([m[13;7H([46C)[46m)[m[52;163H6[13;56H[?25h[?25l)[10;3H[46m([m[12;5H([13;55H)[46m)[m[52;163H7[13;57H[?25h[?25l)[9;1H[46m([m
  ([13;56H)[46m)[m[52;163H8[13;58H[?25h[?25l[9;1H([13;12H[46m([40C)[m))))[52;163H3[13;53H[?25h[52;1H[K[13;52H[?25l[52;149H^[[13;52H[52;149H  [13;53H[13;12H([12C[46m([26C)[m)[52;159H13,52[9CTop[13;52H[?25h[?25l[52;149H:[13;52H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 90L, 2641B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004llab5-sol.scm:12:4: if: missing an "else" expression
  in: (if (pair? ls) (+ 1 (sum-lengths (cdr (sum-lengths (cdr ls))))))
  location...:
   lab5-sol.scm:12:4
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 90L, 2641B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mnull?[m ls)
    [31m0[m
    ([38;5;130mif[m ([36mpair?[m ls)[13;7H([36m+[m [31m1[m (sum-lengths [106m([m[36mcdr[m (sum-lengths ([36mcdr[m ls))[106m)[m)))))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[50;9H[35m'()[m[51;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[52;159H13,52[9CTop[13;52H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mnull?[m ls)
    [95m0[m
    ([93mif[m ([1m[96mpair?[m ls)[13;7H([1m[96m+[m [95m1[m (sum-lengths [46m([m[1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls))[46m)[m)))))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[50;9H[38;5;224m'()[m[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H13,52[9CTop"lab5-sol.scm" 90L, 2641B[13;52H[?25h[?25l[12;9H[46m([8C)[m[13;25H([26C)[52;160H2,9 [12;9H[?25h[?25l[52;149Hi[12;9H[52;149H [12;9H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H12,9[10CTop[12;9H[?25h[?25l([1m[96m[46mp[m[1m[96mair?[m ls)[12;18H[K[12;8H[46m([m[1m[96mpair?[m ls[46m)[m[52;162H8[12;8H[?25h[?25li([1m[96m[46mp[m[1m[96mair?[m ls)[12;17H[K[12;7H[46m([m[1m[96mpair?[m ls[46m)[m[52;162H7[12;7H[?25h[?25l([1m[96m[46mp[m[1m[96mair?[m ls)[12;16H[K[12;6H[46m([m[1m[96mpair?[m ls[46m)[m[52;162H6[12;6H[?25h[?25l[52;162H16[12;16H[?25h[?25l[52;162H6 [12;6H[?25h[?25l[46mi[m([1m[96mpair?[m l[46ms[m)    (i[46m([m[7Cs[46m)[m[52;162H7[12;7H[?25h[?25l[93mi[m[93m[46mf[m([1m[96mpair?[m l[46ms[m)[12;7H[93mf[m[46m([m[7Cs[46m)[m[52;162H8[12;8H[?25h[?25l[46m [m([1m[96mpair?[m l[46ms[m)[12;8H [46m([m[7Cs[46m)[m[52;162H9[12;9H[?25h[?25l[9;1H[46m([m[12;9H([8C)[13;57H[46m)[m[52;160H3,58[13;58H[?25h[?25l[13;57H[K[9;1H(
  [46m([13;56H)[m[52;163H7[13;57H[?25h[?25l[13;56H[K[10;3H([12;5H[46m([13;55H)[m[52;163H6[13;56H[?25h[?25l[13;55H[K[12;5H([13;7H[46m([46C)[m[52;163H5[13;55H[?25h[?25l[14;51r[14;1H[L[1;52r[52;159H[K[52;159H14,7[10CTop[13;7H([46C)[14;7H[?25h[?25le[52;162H8[14;8H[?25h[?25l[14;7H[K[52;162H7[14;7H[?25h[?25l[95m0[m[52;162H8[14;8H[?25h[?25l)[12;5H[46m([14;8H)[m[52;162H9[14;9H[?25h[?25l)[10;3H[46m([m[12;5H([14;8H)[46m)[m[52;162H10[14;10H[?25h[?25l)[9;1H[46m([m
  ([14;9H)[46m)[m[52;163H1[14;11H[?25h[52;1H[K[14;10H[?25l[52;149H^[[14;10H[52;149H  [14;11H[52;159H14,10[9CTop[14;10H[?25h[?25l[52;149H:[14;10H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 91L, 2649B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lcdr: contract violation
  expected: pair?
  given: 0
  context...:
   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/check.rkt:121:16
   "/home/dwalcot1/i471a/submit/lab5/lab5-sol.scm": [running body]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 91L, 2649B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[106m([m[38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mnull?[m ls)
    [31m0[m
    ([38;5;130mif[m ([36mpair?[m ls)[13;7H([36m+[m [31m1[m (sum-lengths ([36mcdr[m (sum-lengths ([36mcdr[m ls)))))[14;7H[31m0[m))[106m)[m

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[51;9H[35m'()[m[52;159H14,10[9CTop[14;10H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[46m([m[93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mnull?[m ls)
    [95m0[m
    ([93mif[m ([1m[96mpair?[m ls)[13;7H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m (sum-lengths ([1m[96mcdr[m ls)))))[14;7H[95m0[m))[46m)[m

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[51;9H[38;5;224m'()[m[52;159H14,10[9CTop"lab5-sol.scm" 91L, 2649B[14;10H[?25h[?25l[9;1H([13;25H[46m([26C)[m[14;10H)[52;160H3,52[13;52H[?25h[?25l[13;7H[46m([m[17C([26C))[46m)[m[52;163H4[13;54H[?25h[?25l[13;7H([35C[46m([6C)[m))))[52;162H43[13;43H[?25h[?25l[52;149Hi[13;43H[52;149H [13;43H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H13,43[9CTop[13;43H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;54H[K[13;42H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H2[13;42H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;53H[K[13;41H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H1[13;41H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;52H[K[13;40H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H0[13;40H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;51H[K[13;39H[46m([m[1m[96mcdr[m ls[46m)[m)[52;162H39[13;39H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;50H[K[13;38H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H8[13;38H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;49H[K[13;37H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H7[13;37H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;48H[K[13;36H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H6[13;36H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;47H[K[13;35H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H5[13;35H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;46H[K[13;34H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H4[13;34H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;45H[K[13;33H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H3[13;33H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;44H[K[13;32H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H2[13;32H[?25h[?25l([1m[96m[46mc[m[1m[96mdr[m ls)[13;43H[K[13;31H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H1[13;31H[?25h[?25l[1m[96m[46mc[m[1m[96mdr[m ls)[13;42H[K[13;30H[46m([m[1m[96mcdr[m ls[46m)[m)[52;163H0[13;30H[?25h[?25l[52;163H1[13;31H[?25h[?25l([6C)[52;163H2[13;32H[?25h[?25l[52;163H3[13;33H[?25h[?25l[52;163H4[13;34H[?25h[?25l[52;163H5[13;35H[?25h[?25l[52;163H6[13;36H[?25h[?25l[46m([6C)[m[52;163H7[13;37H[?25h[?25l[13;25H[46m([m[4C([6C)[46m)[m[52;163H8[13;38H[?25h[?25l[13;12H[46m([m[12C([12C)[46m)[m[52;163H9[13;39H[?25h[?25l[13;41H[K[13;12H([12C[46m([12C)[m)[52;163H8[13;38H[?25h[?25l[13;12H[46m([m[12C([12C)[46m)[m[52;163H9[13;39H[?25h[?25l[13;7H[46m([m[4C([26C)[46m)[m[52;162H40[13;40H[?25h[?25l[52;163H1[13;41H[?25h[?25l[52;163H0[13;40H[?25h[52;1H[K[13;39H[?25l[52;149H^[[13;39H[52;149H  [13;40H[13;7H([4C[46m([26C)[m)[52;159H13,39[9CTop[13;39H[?25h[?25l[52;149H:[13;39H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 91L, 2635B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:17:0
actual:     1
expected:   0
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:18:0
actual:     1
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:19:0
actual:     1
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:27:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:28:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:37:0
actual:     0
expected:   5
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:38:0
actual:     0
expected:   11
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:39:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:40:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:41:0
actual:     0
expected:   -6
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:66:0
actual:     '()
expected:   '(3 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:67:0
actual:     '()
expected:   '(1 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:68:0
actual:     '()
expected:   '(3 6 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:69:0
actual:     '()
expected:   '(3 6 1 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:76:0
actual:     '()
expected:   '(#t #f #f #t #t #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:78:0
actual:     '()
expected:   '(#t #f #f #t #f #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:87:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:88:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:89:0
actual:     '()
expected:   '(-1 -3 1)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:90:0
actual:     '()
expected:   '(-1 -3)
--------------------
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 91L, 2635B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mnull?[m ls)
    [31m0[m
    ([38;5;130mif[m ([36mpair?[m ls)[13;7H([36m+[m [31m1[m [106m([msum-lengths ([36mcdr[m ([36mcdr[m ls))[106m)[m)[14;7H[31m0[m)))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[51;9H[35m'()[m[52;159H13,39[9CTop[13;39H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mnull?[m ls)
    [95m0[m
    ([93mif[m ([1m[96mpair?[m ls)[13;7H([1m[96m+[m [95m1[m [46m([msum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))[46m)[m)[14;7H[95m0[m)))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[51;9H[38;5;224m'()[m[52;159H13,39[9CTop"lab5-sol.scm" 91L, 2635B[13;39H[?25h[?25l[12;9H[46m([8C)[m[13;12H([26C)[52;160H2,18[12;18H[?25h[?25l[10;3H[46m([m[12;9H([8C)[14;9H[46m)[m[52;160H4,9 [14;9H[?25h[?25l[9;9H[46m([14C)[m
  ([14;9H)[52;159H9,24[9;24H[?25h[?25l[52;149Hi[9;24H[52;149H [9;24H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H9,24[10CTop[9;24H[?25h[?25l[52;162H5[9;25H[?25h[?25l[10;51r[10;1H[L[1;52r[52;159H[K[52;159H10,3[10CTop[9;9H([14C)
  [?25h[?25l([46m([15;10H)[m[52;162H4[10;4H[?25h[?25ld([15;10H)[52;162H5[10;5H[?25h[?25li[52;162H6[10;6H[?25h[?25ls[52;162H7[10;7H[?25h[?25lp[52;162H8[10;8H[?25h[?25ll[52;162H9[10;9H[?25h[?25la[52;162H10[10;10H[?25h[?25l  ([1m[96mdisplay[m[52;163H1[10;11H[?25h[?25l[52;163H2[10;12H[?25h[?25l([46m([15;10H)[m[52;163H3[10;13H[?25h[?25ll([15;10H)[52;163H4[10;14H[?25h[?25ls[52;163H5[10;15H[?25h[?25l)[46m([mls[46m)[m[52;163H6[10;16H[?25h[?25l)  [46m([m[8C(ls)[46m)[m[52;163H7[10;17H[?25h[?25l  ([12C)[11;7H[46m([8C)[m[52;160H1[11;17H[?25h[52;1H[K[11;16H[?25l[52;149H^[[11;16H[52;149H  [11;17H[52;159H11,16[9CTop[11;16H[?25h[?25l[52;149H:[11;16H[52;149H[K[52;1H:[?25hx[?25l[52;2H[K[52;2H[?25h [?25l[11;16H[52;159H11,16[9CTop[11;16H[?25h[?25l[52;149Hi[11;16H[52;149H [11;16H[52;1H[1m-- INSERT --[m[52;159H[K[52;159H11,16[9CTop[11;16H[?25h[?25l[10;3H[46m([12C)[m[11;7H([8C)[52;160H0[10;16H[?25h[?25l[52;163H7[10;17H[?25h[?25l  ([12C)[52;163H8[10;18H[?25h[?25l([46m([15;10H)[m[52;163H9[10;19H[?25h[?25ln([15;10H)[52;162H20[10;20H[?25h[?25le[52;163H1[10;21H[?25h[?25lw[52;163H2[10;22H[?25h[?25ll[52;163H3[10;23H[?25h[?25li[52;163H4[10;24H[?25h[?25ln[52;163H5[10;25H[?25h[?25l[1m[96mnewline[m[52;163H6[10;26H[?25h[?25l)[10;18H[46m([7C)[m[52;163H7[10;27H[?25h[52;1H[K[10;26H[?25l[52;149H^[[10;26H[52;149H  [10;27H[52;159H10,26[9CTop[10;26H[?25h[?25l[52;149H:[10;26H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 92L, 2662B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lapplication: not a procedure;
 expected a procedure that can be applied to arguments
  given: '()
  arguments...: [none]
  context...:
   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/check.rkt:121:16
   "/home/dwalcot1/i471a/submit/lab5/lab5-sol.scm": [running body]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 92L, 2662B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([36mdisplay[m (ls)) [106m([m[36mnewline[m[106m)[m
  ([38;5;130mif[m ([36mnull?[m ls)
    [31m0[m
    ([38;5;130mif[m ([36mpair?[m ls)[14;7H([36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ls))))[15;7H[31m0[m)))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[52;159H10,26[9CTop[10;26H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([1m[96mdisplay[m (ls)) [46m([m[1m[96mnewline[m[46m)[m
  ([93mif[m ([1m[96mnull?[m ls)
    [95m0[m
    ([93mif[m ([1m[96mpair?[m ls)[14;7H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))[15;7H[95m0[m)))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[52;159H10,26[9CTop"lab5-sol.scm" 92L, 2662B[10;26H[?25h[?25l[52;149Hi[10;26H[52;149H [10;26H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H10,26[9CTop[10;26H[?25h[?25l[52;163H7[10;27H[?25h[?25l[10;26H[K[10;18H([52;163H6[10;26H[?25h[?25l[10;19Hnewlin[10;25H[K[52;163H5[10;25H[?25h[?25l[10;24H[K[52;163H4[10;24H[?25h[?25l[10;23H[K[52;163H3[10;23H[?25h[?25l[10;22H[K[52;163H2[10;22H[?25h[?25l[10;21H[K[52;163H1[10;21H[?25h[?25l[10;20H[K[52;163H0[10;20H[?25h[?25l[10;19H[K[10;18H[46m([15;10H)[m[52;162H19[10;19H[?25h[?25l[10;18H[K[15;10H)[52;163H8[10;18H[?25h[?25l  [46m([12C)[m[52;163H7[10;17H[?25h[52;1H[K[10;16H[?25l[52;149H^[[10;16H[52;149H  [10;17H[52;159H10,16[9CTop[10;16H[?25h[?25l[52;149H:[10;16H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 92L, 2652B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lapplication: not a procedure;
 expected a procedure that can be applied to arguments
  given: '()
  arguments...: [none]
  context...:
   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/check.rkt:121:16
   "/home/dwalcot1/i471a/submit/lab5/lab5-sol.scm": [running body]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 92L, 2652B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  [106m([m[36mdisplay[m (ls)[106m)[m
  ([38;5;130mif[m ([36mnull?[m ls)
    [31m0[m
    ([38;5;130mif[m ([36mpair?[m ls)[14;7H([36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ls))))[15;7H[31m0[m)))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[52;159H10,16[9CTop[10;16H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  [46m([m[1m[96mdisplay[m (ls)[46m)[m
  ([93mif[m ([1m[96mnull?[m ls)
    [95m0[m
    ([93mif[m ([1m[96mpair?[m ls)[14;7H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))[15;7H[95m0[m)))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[52;159H10,16[9CTop"lab5-sol.scm" 92L, 2652B[10;16H[?25h[?25l[52;149Hi[10;16H[52;149H [10;16H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H10,16[9CTop[10;16H[?25h[?25l[52;163H7[10;17H[?25h[?25l[10;16H[K[10;3H([8C[46m([mls[46m)[m[52;163H6[10;16H[?25h[?25l[10;15H[K[10;12H([52;163H5[10;15H[?25h[?25l[10;14H[K[52;163H4[10;14H[?25h[?25l[10;13H[K[10;12H[46m([15;10H)[m[52;163H3[10;13H[?25h[?25l[10;12H[K[15;10H)[52;163H2[10;12H[?25h[?25l[52;163H1[10;11H[?25h[?25l  (displa[10;10H[K[52;163H0[10;10H[?25h[?25l[10;9H[K[52;162H9 [10;9H[?25h[?25l[10;8H[K[52;162H8[10;8H[?25h[?25l[10;7H[K[52;162H7[10;7H[?25h[?25l[10;6H[K[52;162H6[10;6H[?25h[?25l[10;5H[K[52;162H5[10;5H[?25h[?25l[10;4H[K[10;3H[46m([15;10H)[m[52;162H4[10;4H[?25h[?25l[10;3H[K[15;10H)[52;162H3[10;3H[?25h[?25l[52;162H2[10;2H[?25h[?25l[52;162H1[10;1H[?25h[?25l[9;51r[51;1H
[1;52r[9;1H([93mdefine[m (sum-lengths ls)[51;9H[38;5;224m'()[m[52;159H[K[52;159H9,25[10CTop[9;9H[46m([14C)[?25h[?25l[m[9;9H([14C)[52;159H11,6[11;6H[?25h[?25l[12;9H[46m([8C)[m[52;160H2,19[12;19H[?25h[?25l[12;9H([8C)[52;160H1,6 [11;6H[?25h[?25l[52;162H7[11;7H[?25h[?25l([46m([14;9H)[m[52;162H8[11;8H[?25h[?25ld([14;9H)[52;162H9[11;9H[?25h[?25li[52;162H10[11;10H[?25h[?25ls[52;163H1[11;11H[?25h[?25lp[52;163H2[11;12H[?25h[?25ll[52;163H3[11;13H[?25h[?25la[52;163H4[11;14H[?25h[?25l[1m[96mdisplay[m[52;163H5[11;15H[?25h[?25l)[11;7H[46m([7C)[m[52;163H6[11;16H[?25h[?25l[52;163H5[11;15H[?25h[?25l[46m [m) [46m)[m[52;163H6[11;16H[?25h[?25l[46m([m)[11;7H([9C[46m)[m[52;163H7[11;17H[?25h[?25l[1C)[11;7H[46m([m[8C()[46m)[m[52;163H8[11;18H[?25h[?25l[11;7H([8C[46m()[m)[52;163H7[11;17H[?25h[?25l[46ml[m))l[46m)[m[52;163H8[11;18H[?25h[?25l[46ms[m))s[46m)[m[52;163H9[11;19H[?25h[?25l[11;7H[46m([m[8C(ls)[46m)[m[52;162H20[11;20H[?25h[?25l[52;163H1[11;21H[?25h[?25l[52;163H0[11;20H[?25h[?25l[11;7H([8C[46m([mls[46m)[m)[52;162H19[11;19H[?25h[?25l(ls)[52;163H8[11;18H[?25h[?25l[46m([mls[46m)[m[52;163H7[11;17H[?25h[?25l[52;163H6[11;16H[?25h[?25l(ls)[52;163H5[11;15H[?25h[?25l[52;163H4[11;14H[?25h[?25l[52;163H3[11;13H[?25h[?25l[52;163H2[11;12H[?25h[?25l[52;163H1[11;11H[?25h[?25l[52;163H0[11;10H[?25h[?25l[52;162H9 [11;9H[?25h[?25l[46m([12C)[m[52;162H8[11;8H[?25h[?25l[52;162H7[11;7H[?25h[?25l[52;162H8[11;8H[?25h[?25l[52;162H21[11;21H[?25h[?25l[11;20H[K[11;7H([8C[46m([mls[46m)[m[52;163H0[11;20H[?25h[?25l[11;19H[K[11;16H([52;162H19[11;19H[?25h[?25l[11;18H[K[52;163H8[11;18H[?25h[?25l[11;17H[K[11;16H[46m([14;9H)[m[52;163H7[11;17H[?25h[?25l[11;16H[K[14;9H)[52;163H6[11;16H[?25h[?25l[52;163H5[11;15H[?25h[?25l[11;8Hdispla[11;14H[K[52;163H4[11;14H[?25h[?25l[11;13H[K[52;163H3[11;13H[?25h[?25l[11;12H[K[52;163H2[11;12H[?25h[?25l[11;11H[K[52;163H1[11;11H[?25h[?25l[11;10H[K[52;163H0[11;10H[?25h[?25l[11;9H[K[52;162H9 [11;9H[?25h[?25l[11;8H[K[11;7H[46m([14;9H)[m[52;162H8[11;8H[?25h[?25l[11;7H[K[14;9H)[52;162H7[11;7H[?25h[?25l[52;162H6[11;6H[?25h[?25l[12;9H[46m([8C)[m[52;160H2,19[12;19H[?25h[?25l[13;51r[13;1H[L[1;52r[52;159H[K[52;159H13,7[10CTop[12;9H([8C)[13;7H[?25h[?25l([46m([15;8H)[m[52;162H8[13;8H[?25h[?25ld([15;8H)[52;162H9[13;9H[?25h[?25li[52;162H10[13;10H[?25h[?25ls[52;163H1[13;11H[?25h[?25ll[52;163H2[13;12H[?25h[?25l[13;11H[K[52;163H1[13;11H[?25h[?25lp[52;163H2[13;12H[?25h[?25ll[52;163H3[13;13H[?25h[?25la[52;163H4[13;14H[?25h[?25l[1m[96mdisplay[m[52;163H5[13;15H[?25h[?25l[13;8Hdispla[13;14H[K[52;163H4[13;14H[?25h[?25l[13;13H[K[52;163H3[13;13H[?25h[?25l[13;12H[K[52;163H2[13;12H[?25h[?25l[13;11H[K[52;163H1[13;11H[?25h[?25l[13;10H[K[52;163H0[13;10H[?25h[?25l[13;9H[K[52;162H9 [13;9H[?25h[?25l[13;8H[K[13;7H[46m([15;8H)[m[52;162H8[13;8H[?25h[?25l[13;7H[K[15;8H)[52;162H7[13;7H[?25h[?25l[52;162H6[13;6H[?25h[?25l[52;162H5[13;5H[?25h[?25l[52;162H4[13;4H[?25h[?25l[52;162H3[13;3H[?25h[?25l[52;162H2[13;2H[?25h[?25l[52;162H1[13;1H[?25h[?25l[12;51r[51;1H
[1;52r[12;5H([93mif[m ([1m[96mpair?[m ls)[51;9H[38;5;224m'()[m[52;159H[K[52;159H12,19[9CTop[12;9H[46m([8C)[?25h[?25l[m[12;9H([8C)[52;160H1,6 [11;6H[?25h[?25l
    [46m([14;8H)[m[52;160H2,5[12;5H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[12;18H[K[12;4H[46m([m[93mi[m[52;162H4[12;4H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[12;17H[K[12;3H[46m([m[93mi[m[52;162H3[12;3H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[12;16H[K[12;2H[46m([m[93mi[m[52;162H2[12;2H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[12;15H[K[12;1H[46m([m[93mi[m[52;162H1[12;1H[?25h[?25l[11;51r[51;1H
[1;52r[11;1H    [95m0[m([93mif[m ([1m[96mpair?[m ls)
[46m [m[13;8H)[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H[K[52;159H11,6[10CTop[11;6H[46m([m
 [13;8H[46m)[11;6H[?25h[?25l[m([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[11;19H[K[11;5H[46m([m[93mi[m[52;162H5[11;5H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[11;18H[K[11;4H[46m([m[93mi[m[52;162H4[11;4H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[11;17H[K[11;3H[46m([m[93mi[m[52;162H3[11;3H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[11;16H[K[11;2H[46m([m[93mi[m[52;162H2[11;2H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[11;15H[K[11;1H[46m([m[93mi[m[52;162H1[11;1H[?25h[?25l[10;51r[51;1H
[1;52r[10;1H  ([93mif[m ([1m[96mnull?[m ls)([93mif[m ([1m[96mpair?[m ls)
[46m [m[12;8H)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H10,17[9CTop[10;17H[46m([m
 [12;8H[46m)[10;17H[?25h[?25l[m([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;30H[K[10;16H[46m([m[93mi[m[52;163H6[10;16H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;29H[K[10;15H[46m([m[93mi[m[52;163H5[10;15H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;28H[K[10;14H[46m([m[93mi[m[52;163H4[10;14H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;27H[K[10;13H[46m([m[93mi[m[52;163H3[10;13H[?25h[?25lnull([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;26H[K[10;12H[46m([m[93mi[m[52;163H2[10;12H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;25H[K[10;11H[46m([m[93mi[m[52;163H1[10;11H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;24H[K[10;10H[46m([m[93mi[m[52;163H0[10;10H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;23H[K[10;9H[46m([m[93mi[m[52;162H9 [10;9H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;22H[K[10;8H[46m([m[93mi[m[52;162H8[10;8H[?25h[?25l[93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;21H[K[10;7H[46m([m[93mi[m[52;162H7[10;7H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;20H[K[10;6H[46m([m[93mi[m[52;162H6[10;6H[?25h[?25li([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;19H[K[10;5H[46m([m[93mi[m[52;162H5[10;5H[?25h[?25l([93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;18H[K[10;4H[46m([m[93mi[m[52;162H4[10;4H[?25h[?25l[93m[46mi[m[93mf[m ([1m[96mpair?[m ls)[10;17H[K[10;3H[46m([m[93mi[m[52;162H3[10;3H[?25h[?25l([12;8H)[52;160H2,11[12;11H[?25h[?25l[52;160H1,27[11;27H[?25h[?25l[3C[46m([6C)[m[52;162H3[11;37H[?25h[?25l)[11;40H[K[11;36H[46m)[m)[52;163H6[11;36H[?25h[?25l)[11;39H[K[11;35H[46m)[m)[52;163H5[11;35H[?25h[?25l[46m([m))))[11;30H([5C[46m)[m[52;163H6[11;36H[?25h[?25l[4C)[11;30H[46m([m[4C()[46m)[m[52;163H7[11;37H[?25h[?25l[11;30H([4C[46m()[m)[52;163H6[11;36H[?25h[?25l[46ms[m)))))s[46m)[m[52;163H7[11;37H[?25h[?25l[46md[m)))))d[46m)[m[52;163H8[11;38H[?25h[?25l[46mr[m)))))r[46m)[m[52;163H9[11;39H[?25h[?25l[46m [m))))) [46m)[m[52;162H40[11;40H[?25h[?25l[46ml[m)))))l[46m)[m[52;163H1[11;41H[?25h[?25l[46ms[m)))))s[46m)[m[52;163H2[11;42H[?25h[?25l[11;35H(sdr ls)[52;163H1[11;41H[?25h[?25l[52;163H0[11;40H[?25h[?25l[52;162H39[11;39H[?25h[?25l[52;163H8[11;38H[?25h[?25l[52;163H7[11;37H[?25h[?25ldr ls)[11;46H[K[11;35H[46m([mdr ls[46m)[m[52;163H6[11;36H[?25h[?25l[1m[96mcdr[m l[46ms[m)))))[11;35H([5Cs[52;163H7[11;37H[?25h[?25l[11;7H[46m([38C)[m[52;162H4[11;47H[?25h[52;1H[K[11;46H[?25l[52;149H^[[11;46H[52;149H  [11;47H[52;159H11,46[9CTop[11;46H[?25h[?25l[52;149H:[11;46H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 89L, 2616B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004llab5-sol.scm:12:9: read-syntax: unexpected `)`
  context...:
   /usr/share/racket/collects/syntax/module-reader.rkt:186:17: body
   /usr/share/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal
   /usr/share/racket/collects/racket/../syntax/module-reader.rkt:65:9: lang:read-syntax
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 89L, 2616B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mif[m ([36mpair?[m ls)[11;7H[106m([m[36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ([36mcdr[m ls))))[106m)[m[12;7H[31m0[m)))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[49;9H[35m'()[m[50;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[51;15H(greater-than ([36mcdr[m ls) v)))))[52;159H11,46[9CTop[11;46H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mif[m ([1m[96mpair?[m ls)[11;7H[46m([m[1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ([1m[96mcdr[m ls))))[46m)[m[12;7H[95m0[m)))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[49;9H[38;5;224m'()[m[50;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H11,46[9CTop"lab5-sol.scm" 89L, 2616B[11;46H[?25h[?25l[11;7H([38C)[52;160H0,12[10;12H[?25h[?25l[52;149H~@k[10;12H[52;149H   [10;11H[52;163H1[10;11H[?25h[?25l[52;149H~@k[10;11H[52;149H   [10;10H[52;163H0[10;10H[?25h[?25l[52;149H~@k[10;10H[52;149H   [10;11H[52;163H1[10;11H[?25h[?25l[52;149H~@k[10;11H[52;149H   [10;12H[52;163H2[10;12H[?25h[?25l[52;149H~@k[10;12H[52;149H   [9;12H[52;159H9,12 [9;12H[?25h[?25l[52;149H~@k[9;12H[52;149H   [10;12H[52;159H10,12[10;12H[?25h[?25l[9;9H[46m([14C)[m[52;159H9,24 [9;24H[?25h[?25l[9;9H([14C)
  [46m([12;8H)[m[52;159H10,3[10;3H[?25h[?25l[52;149H2[10;4H[48;5;242m([m[12;8H)[52;1H[1m-- VISUAL --[m[52;13H[K[52;149H2[10;4H[52;159H10,4[10CTop[10;4H[?25h[?25l[52;149H3[10;5H[93m[48;5;242mi[m[52;162H5[10;5H[?25h[?25l[52;149H4[10;6H[93m[48;5;242mf[m[52;162H6[10;6H[?25h[?25l[52;149H2[11;6H[10;6H[48;5;242m ([m[1m[96m[48;5;242mpair?[m[48;5;242m ls) 
     [m[52;160H1[11;6H[?25h[?25l [48;5;242m [m[46m([38C)[m[52;162H7[11;7H[?25h[?25l[1C[48;5;242m([m[38C)[52;162H8[11;8H[?25h[?25l[52;149H3[12;8H[11;8H[1m[96m[48;5;242m+[m[48;5;242m [m[95m[48;5;242m1[m[48;5;242m (sum-lengths ([m[1m[96m[48;5;242mcdr[m[48;5;242m ([m[1m[96m[48;5;242mcdr[m[48;5;242m ([m[1m[96m[48;5;242mcdr[m[48;5;242m ls))))) 
      [m[95m[48;5;242m0[m[46m)[m[52;160H2[12;8H[?25h[?25l[1C[9;1H[46m([m[12;8H[48;5;242m)[m[46m)[m[52;162H9[12;9H[?25h[?25l[1C[9;1H([12;9H[48;5;242m)[m[52;162H10[12;10H[?25h[?25l[?25h[?25l[52;149Hc[12;10H[52;149H [10;3H[52;4H[1mINSERT [m[52;159H[K[52;159H10,3[10CTop[10;51r[10;1H[2M[1;52r[10;1H  [10;3H[K[51;1H(check-equal? (greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m)[52;159H[K[52;159H10,3[10CTop[10;3H[?25h[?25l[52;162H2[10;2H[?25h[?25l[52;162H1[10;1H[?25h[?25l[9;51r[51;1H
[1;52r[9;1H([93mdefine[m (sum-lengths ls)[51;15H[38;5;224m'([m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#t[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#f[m[38;5;224m [m[95m#t[m[38;5;224m)[m)[52;159H[K[52;159H9,25[10CTop[9;9H[46m([14C)[?25h[?25l[10;51r[m[10;1H[L[1;52r[52;159H[K[52;159H10,3[10CTop[9;9H([14C)
  [?25h[?25l[11;51r[11;1H[L[1;52r[10;3H([93mcond[m (([1m[96mnull?[m [1m[96mlist[m) [95m0[m)[11;12H(([1m[96mpair?[m [1m[96mlist[m)[52;159H[K[52;159H11,25[9CTop[11;13H[46m([10C)[?25h[?25l[m[11;13H([10C)[52;162H12[11;12H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;24H[K[52;163H1[11;11H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;23H[K[52;163H0[11;10H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;22H[K[52;162H9 [11;9H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;21H[K[52;162H8[11;8H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;20H[K[52;162H7[11;7H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;19H[K[52;162H6[11;6H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;18H[K[52;162H5[11;5H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;17H[K[52;162H4[11;4H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;16H[K[52;162H3[11;3H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;15H[K[52;162H2[11;2H[?25h[?25l(([1m[96mpair?[m [1m[96mlist[m)[11;14H[K[52;162H1[11;1H[?25h[?25l[10;51r[51;1H
[1;52r[10;1H  ([93mcond[m (([1m[96mnull?[m [1m[96mlist[m) [95m0[m)(([1m[96mpair?[m [1m[96mlist[m)[51;1H(check-equal? (greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m)[52;159H[K[52;159H10,25[9CTop[10;25H[?25h[?25l[11;51r[11;1H[L[1;52r[10;25H[K[11;9H(([1m[96mpair?[m [1m[96mlist[m)[52;159H[K[52;159H11,2-9[8CTop[11;9H[?25h[?25l[52;160H0,3  [10;3H[?25h[?25l([93mcond[m (([1m[96mnull?[m [1m[96mlist[m) [95m0[m)[10;24H[K[52;162H2[10;2H[?25h[?25l([93mcond[m (([1m[96mnull?[m [1m[96mlist[m) [95m0[m)[10;23H[K[52;162H1[10;1H[?25h[?25l[9;51r[51;1H
[1;52r[9;2H[93mdefine[m (sum-lengths ls)([93mcond[m (([1m[96mnull?[m [1m[96mlist[m) [95m0[m)[51;1H(check-equal? (greater-than [38;5;224m'([m[95m-1[m[38;5;224m [m[95m3[m[38;5;224m [m[95m6[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m1[m[38;5;224m [m[95m8[m[38;5;224m)[m [95m2[m)[52;159H[K[52;159H9,25[10CTop[9;25H[?25h[?25l[10;51r[10;1H[L[1;52r[9;25H[K[10;3H([93mcond[m (([1m[96mnull?[m [1m[96mlist[m) [95m0[m)[52;159H[K[52;159H10,3[10CTop[10;3H[?25h[?25l[52;160H1,2-9[11;9H[?25h[?25l[10;10H[46m([10C)[m[52;160H0,21 [10;21H[?25h[?25llis)[46m [m[95m0[m)[10;24H[K[10;20H[46m)[m [52;163H0[10;20H[?25h[?25l)[46m [m[95m0[m)[10;23H[K[10;19H[46m)[m [52;162H19[10;19H[?25h[?25l)[46m [m[95m0[m)[10;22H[K[10;18H[46m)[m [52;163H8[10;18H[?25h[?25l)[46m [m[95m0[m)[10;21H[K[10;17H[46m)[m [52;163H7[10;17H[?25h[?25l[46ml[m) [95m0[m)l[46m)[m[52;163H8[10;18H[?25h[?25l[46ms[m) [95m0[m)s[46m)[m[52;163H9[10;19H[?25h[?25l[10;10H([8C)[11;10H[46m([10C)[m[52;160H1,14-21[11;21H[?25h[?25llis)[11;21H[K[11;20H[46m)[m[52;163H3-20[11;20H[?25h[?25l)[11;20H[K[11;19H[46m)[m[52;163H2-19[11;19H[?25h[?25l)[11;19H[K[11;18H[46m)[m[52;163H1-18[11;18H[?25h[?25l)[11;18H[K[11;17H[46m)[m[52;163H0-17[11;17H[?25h[?25l[46ml[m)l[46m)[m[52;163H1-18[11;18H[?25h[?25l[46ms[m)s[46m)[m[52;163H2-19[11;19H[?25h[?25l[52;163H3-20[11;20H[?25h[?25l[12;51r[12;1H[L[1;52r[52;159H[K[52;159H12,3-10[7CTop[11;10H([8C)[12;10H[?25h[?25l([52;162H4-11[12;11H[?25h[?25l[1m[96m+[m[52;162H5-12[12;12H[?25h[?25l[95m+1[m[52;162H6-13[12;13H[?25h[?25l[52;162H7-14[12;14H[?25h[?25l[52;162H6-13[12;13H[?25h[?25l[1m[96m+[m[12;12H[K[52;162H5-12[12;12H[?25h[?25l[52;162H6-13[12;13H[?25h[?25l[95m1[m[52;162H7-14[12;14H[?25h[?25l[52;162H8-15[12;15H[?25h[?25l([52;162H9-16[12;16H[?25h[?25ls[52;162H10-17[12;17H[?25h[?25lu[52;163H1-18[12;18H[?25h[?25lm[52;163H2-19[12;19H[?25h[?25l-[52;163H3-20[12;20H[?25h[?25ll[52;163H4-21[12;21H[?25h[?25le[52;163H5-22[12;22H[?25h[?25ln[52;163H6-23[12;23H[?25h[?25lg[52;163H7-24[12;24H[?25h[?25lt[52;163H8-25[12;25H[?25h[?25lh[52;163H9-26[12;26H[?25h[?25ld[52;162H20-27[12;27H[?25h[?25ls[52;163H1-28[12;28H[?25h[?25l[12;27H[K[52;163H0-27[12;27H[?25h[?25l[12;26H[K[52;162H19-26[12;26H[?25h[?25ls[52;162H20-27[12;27H[?25h[?25l[52;163H1-28[12;28H[?25h[?25l([52;163H2-29[12;29H[?25h[?25lc[52;163H3-30[12;30H[?25h[?25ld[52;163H4-31[12;31H[?25h[?25l[1m[96mcdr[m[52;163H5-32[12;32H[?25h[?25l[52;163H6-33[12;33H[?25h[?25l([52;163H7-34[12;34H[?25h[?25lc[52;163H8-35[12;35H[?25h[?25ld[52;163H9-36[12;36H[?25h[?25l[1m[96mcdr[m[52;162H30-37[12;37H[?25h[?25l[52;163H1-38[12;38H[?25h[?25ll[52;163H2-39[12;39H[?25h[?25li[52;163H3-40[12;40H[?25h[?25ls[52;163H4-41[12;41H[?25h[?25l[1m[96mlist[m[52;163H5-42[12;42H[?25h[?25llis[12;41H[K[52;163H4-41[12;41H[?25h[?25l[12;40H[K[52;163H3-40[12;40H[?25h[?25l[12;39H[K[52;163H2-39[12;39H[?25h[?25ls[52;163H3-40[12;40H[?25h[?25l)[12;33H[46m([6C)[m[52;163H4-41[12;41H[?25h[?25l)[12;28H[46m([m[4C([6C)[46m)[m[52;163H5-42[12;42H[?25h[?25l)[12;15H[46m([m[12C([12C)[46m)[m[52;163H6-43[12;43H[?25h[?25l)[12;10H[46m([m[4C([26C)[46m)[m[52;163H7-44[12;44H[?25h[?25l[13;51r[13;1H[L[1;52r[52;159H[K[52;159H13,3-10[7CTop[12;10H([32C)[13;10H[?25h[?25l([52;162H4-11[13;11H[?25h[?25ls[52;162H5-12[13;12H[?25h[?25lu[52;162H6-13[13;13H[?25h[?25lm[52;162H7-14[13;14H[?25h[?25l-[52;162H8-15[13;15H[?25h[?25ll[52;162H9-16[13;16H[?25h[?25le[52;162H10-17[13;17H[?25h[?25ln[52;163H1-18[13;18H[?25h[?25lg[52;163H2-19[13;19H[?25h[?25lt[52;163H3-20[13;20H[?25h[?25lh[52;163H4-21[13;21H[?25h[?25ls[52;163H5-22[13;22H[?25h[?25l[52;163H6-23[13;23H[?25h[?25l([52;163H7-24[13;24H[?25h[?25ld[52;163H8-25[13;25H[?25h[?25lr[52;163H9-26[13;26H[?25h[?25l[13;25H[K[52;163H8-25[13;25H[?25h[?25l[13;24H[K[52;163H7-24[13;24H[?25h[?25lc[52;163H8-25[13;25H[?25h[?25ld[52;163H9-26[13;26H[?25h[?25l[1m[96mcdr[m[52;162H20-27[13;27H[?25h[?25l[52;163H1-28[13;28H[?25h[?25ll[52;163H2-29[13;29H[?25h[?25ls[52;163H3-30[13;30H[?25h[?25l)[13;23H[46m([6C)[m[52;163H4-31[13;31H[?25h[?25l)[13;10H[46m([m[12C([6C)[46m)[m[52;163H5-32[13;32H[?25h[?25l[14;51r[14;1H[L[1;52r[52;159H[K[52;159H14,3-10[7CTop[13;10H([20C)[14;10H[?25h[?25l[52;162H2-9 [14;9H[?25h[?25l[52;162H1  [14;1H[?25h[?25l[13;51r[51;1H
[1;52r[13;10H(sum-lengths ([1m[96mcdr[m ls))[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H[K[52;159H13,25-32      Top[13;10H[46m([20C)[?25h[?25l[m)[11;9H[46m([m[13;10H([20C)[46m)[m[52;163H6-33[13;33H[?25h[?25l[14;51r[14;1H[L[1;52r[52;159H[K[52;159H14,2-9[8CTop[11;9H([13;32H)[14;9H[?25h[?25l[52;162H1  [14;1H[?25h[?25l[13;51r[51;1H
[1;52r[13;10H(sum-lengths ([1m[96mcdr[m ls)))[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H[K[52;159H13,26-33      Top[11;9H[46m([13;32H)[?25h[?25l[m[13;32H[K[11;9H([13;10H[46m([20C)[m[52;163H5-32[13;32H[?25h[?25l[12;10H[46m([32C)[m[13;10H([20C)[52;160H2,37-44[12;44H[?25h[?25l[12;10H([32C)[52;160H4,1    [14;1H[?25h[?25l[13;10H[46m([20C)[m[52;160H3,25-32[13;32H[?25h[?25l)[11;9H[46m([m[13;10H([20C)[46m)[m[52;163H6-33[13;33H[?25h[?25l[14;51r[14;1H[L[1;52r[52;159H[K[52;159H14,2-9[8CTop[11;9H([13;32H)[14;9H[?25h[?25l[95m0[m[52;162H3-10[14;10H[?25h[?25l)[10;3H[46m([14;10H)[m[52;162H4-11[14;11H[?25h[?25l)[9;1H[46m([m
  ([14;10H)[46m)[m[52;162H5-12[14;12H[?25h[?25l[9;1H([11;9H[46m([13;32H)[m[14;11H)[52;160H3,26-33[13;33H[?25h[52;1H[K[13;32H[?25l[52;149H^[[13;32H[52;149H  [13;33H[52;159H13,25-32      Top[13;32H[?25h[?25l[52;149H:[13;32H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 91L, 2645B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004llab5-sol.scm:14:8: cond: bad syntax (clause is not a test-value pair)
  at: 0
  in: (cond ((null? ls) 0) ((pair? ls) (+ 1 (sum-lengths (cdr (cdr ls)))) (sum-lengths (cdr ls))) 0)
  location...:
   lab5-sol.scm:14:8
  context...:
   /usr/share/racket/collects/racket/private/cond.rkt:31:23: loop
   [repeats 1 more time]
   /usr/share/racket/collects/racket/private/cond.rkt:21:13: go
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 91L, 2645B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mcond[m (([36mnull?[m ls) [31m0[m)[11;9H[106m([m([36mpair?[m ls)[12;10H([36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ls))))[13;10H(sum-lengths ([36mcdr[m ls))[106m)[m[14;9H[31m0[m))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[51;9H[35m'()[m[52;159H13,25-32      Top[13;32H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mcond[m (([1m[96mnull?[m ls) [95m0[m)[11;9H[46m([m([1m[96mpair?[m ls)[12;10H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))[13;10H(sum-lengths ([1m[96mcdr[m ls))[46m)[m[14;9H[95m0[m))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[51;9H[38;5;224m'()[m[52;159H13,25-32      Top"lab5-sol.scm" 91L, 2645B[13;32H[?25h[?25l[11;9H([46m([8C)[m[13;32H)[52;160H1,12-19[11;19H[?25h[?25l[52;149H:[11;19H[52;1H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m[23;2t[23;1t[52;1H[K[52;1H[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004llab5-sol.scm:14:8: cond: bad syntax (clause is not a test-value pair)
  at: 0
  in: (cond ((null? ls) 0) ((pair? ls) (+ 1 (sum-lengths (cdr (cdr ls)))) (sum-lengths (cdr ls))) 0)
  location...:
   lab5-sol.scm:14:8
  context...:
   /usr/share/racket/collects/racket/private/cond.rkt:31:23: loop
   [repeats 1 more time]
   /usr/share/racket/collects/racket/private/cond.rkt:21:13: go
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C[2P./[C[C[C[C[C[C[C[C[C[C[C[C[C[2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 91L, 2645B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mcond[m (([36mnull?[m ls) [31m0[m)[11;9H([106m([m[36mpair?[m ls[106m)[m[12;10H([36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ls))))[13;10H(sum-lengths ([36mcdr[m ls)))[14;9H[31m0[m))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[51;9H[35m'()[m[52;159H11,12-19      Top[11;19H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mcond[m (([1m[96mnull?[m ls) [95m0[m)[11;9H([46m([m[1m[96mpair?[m ls[46m)[m[12;10H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))[13;10H(sum-lengths ([1m[96mcdr[m ls)))[14;9H[95m0[m))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[51;9H[38;5;224m'()[m[52;159H11,12-19      Top"lab5-sol.scm" 91L, 2645B[11;19H[?25h[?25l[11;10H([8C)[52;160H0,21   [10;21H[?25h[?25l[10;9H[46m([12C)[m[52;163H2[10;22H[?25h[?25l[9;1H[46m([m[10;9H([12C)[14;11H[46m)[m[52;160H4,4-11[14;11H[?25h[?25l[9;1H(
  [46m([14;10H)[m)[52;162H3-10[14;10H[?25h[?25l[10;3H([5C[46m([12C)[m[14;10H)[52;160H0,22  [10;22H[?25h[?25l[10;9H([12C)[11;10H[46m([8C)[m[52;160H1,12-19[11;19H[?25h[?25l[11;9H[46m([m([8C)[13;32H[46m)[m[52;160H3,25-32[13;32H[?25h[?25l[11;9H([13;32H)[52;162H9-16 [13;16H[?25h[?25l[9;1H[46m([14;11H)[m[52;160H4,4-11[14;11H[?25h[?25l[52;149H~@k[14;11H[52;149H   [14;10H[9;1H(
  [46m([14;10H)[m)[52;162H3-10[14;10H[?25h[?25l[52;149H~@k[14;10H[52;149H   [14;9H[10;3H([14;10H)[52;162H2-9 [14;9H[?25h[?25l[52;149H~@k[14;9H[52;149H   [14;10H[10;3H[46m([14;10H)[m[52;162H3-10[14;10H[?25h[?25l[52;149Hi[14;10H[52;149H [14;10H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H14,3-10[7CTop[14;10H[?25h[?25l)[14;11H[K[14;9H[46m)[m)[52;162H2-9 [14;9H[?25h[?25l)[46m)[m[14;9H[K[14;1H[46m)[m)[52;162H1  [14;1H[?25h[?25l[13;51r[51;1H
[1;52r[13;1H  [7C(sum-lengths ([1m[96mcdr[m ls)))))[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H[K[52;159H13,26-33      Top[13;33H[46m)[?25h[?25l[9;1H([m
  ([13;33H)[46m)[m[52;163H8-35[13;35H[?25h[?25l[9;1H([10;9H[46m([12C)[m[13;34H)[52;160H0,22   [10;22H[?25h[?25l[10;9H([12C)[11;9H[46m([13;32H)[m[52;160H1,2-9[11;9H[?25h[?25l([46m([8C)[m[13;32H)[52;162H12-19[11;19H[?25h[?25l[11;10H([8C)[12;10H[46m([32C)[m[52;160H2,4-11 [12;11H[?25h[?25l[9;1H[46m([m[12;10H([32C)[13;34H[46m)[m[52;160H3,27-34[13;34H[?25h[52;1H[K[13;33H[?25l[52;149H^[[13;33H[52;149H  [13;34H[9;1H(
  [46m([13;33H)[m)[52;159H13,26-33      Top[13;33H[?25h[?25l[52;149H:[13;33H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 90L, 2642B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lcdr: contract violation
  expected: pair?
  given: '()
  context...:
   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/check.rkt:121:16
   "/home/dwalcot1/i471a/submit/lab5/lab5-sol.scm": [running body]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C[2P./[C[C[C[C[C[C[C[C[C[C[C[C[C[K./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 90L, 2642B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  [106m([m[38;5;130mcond[m (([36mnull?[m ls) [31m0[m)[11;9H(([36mpair?[m ls)[12;10H([36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ls))))[13;10H(sum-lengths ([36mcdr[m ls)))[106m)[m)

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[50;9H[35m'()[m[51;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[52;159H13,26-33      Top[13;33H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  [46m([m[93mcond[m (([1m[96mnull?[m ls) [95m0[m)[11;9H(([1m[96mpair?[m ls)[12;10H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))[13;10H(sum-lengths ([1m[96mcdr[m ls)))[46m)[m)

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[50;9H[38;5;224m'()[m[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H13,26-33      Top"lab5-sol.scm" 90L, 2642B[13;33H[?25h[?25l[10;3H([13;33H)[52;160H5,5    [15;5H[?25h[?25l[52;160H6,6[16;6H[?25h[?25l[46m([34C)[m[52;162H1[16;1H[?25h[?25l[52;149H;[16;1H[52;149H [16;1H[?25h[?25l[52;149Hi[16;1H[52;149H [16;1H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H16,1[10CTop[16;1H[?25h[?25l[96m[46m;[m[96m(check-eq? (sum-lengths '(() ())) [m[96m[46m0[m[96m);[m[96m[46m([m[33C[96m0[m[96m[46m)[m[52;162H2[16;2H[?25h[?25l[96m[46m;[m[96m(check-eq? (sum-lengths '(() ())) [m[96m[46m0[m[96m);;[m[96m[46m([m[33C[96m0[m[96m[46m)[m[52;162H3[16;3H[?25h[52;1H[K[16;2H[?25l[52;149H^[[16;2H[52;149H  [16;3H[96m([34C)[m[52;159H16,2[10CTop[16;2H[?25h[?25l[52;149H:[16;2H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 90L, 2644B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lcdr: contract violation
  expected: pair?
  given: '()
  context...:
   /usr/share/racket/pkgs/rackunit-lib/rackunit/private/check.rkt:121:16
   "/home/dwalcot1/i471a/submit/lab5/lab5-sol.scm": [running body]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 90L, 2644B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mcond[m (([36mnull?[m ls) [31m0[m)[11;9H(([36mpair?[m ls)[12;10H([36m+[m [31m1[m (sum-lengths ([36mcdr[m ([36mcdr[m ls))))[13;10H(sum-lengths ([36mcdr[m ls)))))

(check-eq? (sum-lengths [35m'()[m) [31m0[m)
[34m;;(check-eq? (sum-lengths '(() ())) 0)[m
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[50;9H[35m'()[m[51;9H([36mcons[m ([36m>[m ([36mcar[m ls) v)[52;159H16,2[10CTop[16;2H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([93mdefine[m (sum-lengths ls)
  ([93mcond[m (([1m[96mnull?[m ls) [95m0[m)[11;9H(([1m[96mpair?[m ls)[12;10H([1m[96m+[m [95m1[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))[13;10H(sum-lengths ([1m[96mcdr[m ls)))))

(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
[96m;;(check-eq? (sum-lengths '(() ())) 0)[m
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[50;9H[38;5;224m'()[m[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H16,2[10CTop"lab5-sol.scm" 90L, 2644B[16;2H[?25h[?25l[52;149Hi[16;2H[52;149H [16;2H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H16,2[10CTop[16;2H[?25h[?25l[1C[96m[46m([34C)[m[52;162H3[16;3H[?25h[?25l[96m([m[96m[46mc[m[96mheck-eq? (sum-lengths '(() ())) 0)[m[16;38H[K[16;2H[96m[46m([m[96mc[m[33C[96m[46m)[m[52;162H2[16;2H[?25h[?25l([46mc[mheck-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)[16;37H[K[16;1H[46m([mc[33C[46m)[m[52;162H1[16;1H[?25h[?25l([34C)[52;160H2,12-19[12;19H[?25h[?25l[11;9H[46m([13;32H)[m[52;160H3,25-32[13;32H[?25h[?25l[9;1H[46m([m[11;9H([13;32H))[46m)[m[52;163H7-34[13;34H[?25h[?25l[9;1H([11;10H[46m([8C)[m[13;34H)[52;160H1,12-19[11;19H[?25h[?25l[10;9H[46m([12C)[m[11;10H([8C)[52;160H0,9    [10;9H[?25h[?25l([12C)[11;10H[46m([8C)[m[52;160H1,3-10[11;10H[?25h[?25l([8C)[12;10H[46m([32C)[m[52;160H2,36-43[12;43H[?25h[?25l[12;10H([4C[46m([26C)[m)[52;163H5-42[12;42H[?25h[?25l[12;10H[46m([m[4C([26C)[46m)[m[52;163H7-44[12;44H[?25h[?25l[11;9H[46m([m[12;10H([32C)[13;32H[46m)[m[52;160H3,25-32[13;32H[?25h[?25l[52;4H[1m(insert)- VISUAL --[m[52;159H[K[52;159H13,27-34      Top[52;149H^O[13;34H[52;149H2 [13;34H[9;1H[46m([m[11;9H([13;32H))[46m)[m[48;5;242m [?25h[?25l[m[52;149H [11;20H[52;4H[1mINSERTt --[m[52;13H[K[52;159H11,13-20      Top[13;35H[K[9;1H([11;10H[46m([8C)[m[13;34H)[11;20H[?25h[?25l[52;162H3-10 [11;10H[?25h[?25l([8C)[16;27H[38;5;224m[46m()[m[52;160H6,27  [16;27H[?25h[?25l[38;5;224m()[m[52;160H2,7-14[12;14H[?25h[?25l[95mi[m (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls))))[52;162H8-15[12;15H[?25h[?25l (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls)[12;44H[K[52;162H7-14[12;14H[?25h[?25l (sum-lengths ([1m[96mcdr[m ([1m[96mcdr[m ls)[12;43H[K[52;162H6-13[12;13H[?25h[?25l[52;4H[1m(insert)- VISUAL --[m[52;159H[K[52;149H2[12;11H[52;159H12,4-11[7CTop[12;10H[48;5;242m([?25h[?25l[m[52;149H3[12;12H[1m[96m[48;5;242m+[m [52;162H5-12[12;12H[?25h[?25l[52;149H4[12;13H[48;5;242m [m[52;162H6-13[12;13H[?25h[?25l[52;149H5[12;14H[48;5;242m [m[46m([26C)[m[52;162H7-14[12;14H[?25h[?25l[52;149H6[12;15H[48;5;242m([m[26C)[52;162H8-15[12;15H[?25h[?25l[52;149H7[12;16H[48;5;242ms[m[52;162H9-16[12;16H[?25h[?25l[52;149H8[12;17H[48;5;242mu[m[52;162H10-17[12;17H[?25h[?25l[52;149H9[12;18H[48;5;242mm[m[52;163H1-18[12;18H[?25h[?25l[52;149H10[12;19H[48;5;242m-[m[52;163H2-19[12;19H[?25h[?25l[52;150H1[12;20H[48;5;242ml[m[52;163H3-20[12;20H[?25h[?25l[52;150H2[12;21H[48;5;242me[m[52;163H4-21[12;21H[?25h[?25l[52;150H3[12;22H[48;5;242mn[m[52;163H5-22[12;22H[?25h[?25l[52;149H2 [13;23H[12;22H[48;5;242mgths ([m[1m[96m[48;5;242mcdr[m[48;5;242m ([m[1m[96m[48;5;242mcdr[m[48;5;242m ls)))) 
         (sum-lengths [m[46m([6C)[m[52;160H3,16-23[13;23H[?25h[?25l[1C[48;5;242m([m[6C)[52;163H7-24[13;24H[?25h[?25l[1C[1m[96m[48;5;242mc[m[1m[96mdr[m [52;163H8-25[13;25H[?25h[?25l[1C[1m[96m[48;5;242md[m[1m[96mr[m [52;163H9-26[13;26H[?25h[?25l[1C[1m[96m[48;5;242mr[m [52;162H20-27[13;27H[?25h[?25l [48;5;242m [m[52;163H1-28[13;28H[?25h[?25ll[48;5;242ml[m[52;163H2-29[13;29H[?25h[?25ls[48;5;242ms[m[46m)[m[52;163H3-30[13;30H[?25h[?25l[1C[48;5;242m)[m[46m)[m[52;163H4-31[13;31H[?25h[?25l[1C[11;9H[46m([m[13;31H[48;5;242m)[m[46m)[m[52;163H5-32[13;32H[?25h[?25l[1C[10;3H[46m([m[11;9H([13;32H[48;5;242m)[m[46m)[m[52;163H6-33[13;33H[?25h[?25l[1C[9;1H[46m([m
  ([13;33H[48;5;242m)[m[46m)[m[52;163H7-34[13;34H[?25h[?25l[?25h[?25l[52;149Hc[13;34H[52;149H [12;10H[52;4H[1mINSERTt --[m[52;13H[K[52;159H12,3-10[7CTop[12;51r[51;1H
[1;52r[12;1H         [12;10H[K[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H12,3-10[7CTop[9;1H([12;10H[?25h[?25l[52;162H2-9 [12;9H[?25h[?25l[10;9H[46m([12C)[m[52;160H0,9  [10;9H[?25h[?25l[11;51r[11;1H[L[1;52r[10;9H[K[11;5H(([1m[96mnull?[m ls) [95m0[m)[52;159H[K[52;159H11,5[10CTop[11;5H[46m([12C)[m    [?25h[?25l([12C)[52;160H2,2-9[12;9H[?25h[?25l(([1m[96mpair?[m ls)[12;12H[K[52;162H1  [12;1H[?25h[?25l[11;51r[51;1H
[1;52r[11;1H    (([1m[96mnull?[m ls) [95m0[m)(([1m[96mpair?[m ls)[51;15H(greater-than ([1m[96mcdr[m ls) v)))))[52;159H[K[52;159H11,19[9CTop[11;19H[?25h[?25l\(([1m[96mpair?[m ls)[52;162H20[11;20H[?25h[?25l(([1m[96mpair?[m ls)[11;30H[K[52;162H19[11;19H[?25h[?25l[12;51r[12;1H[L[1;52r[11;19H[K[12;5H(([1m[96mpair?[m ls)[52;159H[K[52;159H12,5[10CTop[12;5H[?25h[?25l([46m([8C)[m[52;162H16[12;16H[?25h[?25l[13;51r[13;1H[L[1;52r[52;159H[K[52;159H13,6[10CTop[12;6H([8C)[13;6H[?25h[?25l[52;162H5[13;5H[?25h[?25l[52;162H4[13;4H[?25h[?25l[52;162H3[13;3H[?25h[?25l[52;162H2[13;2H[?25h[?25l[52;162H1[13;1H[?25h[?25l[12;51r[51;1H
[1;52r[12;5H(([1m[96mpair?[m ls)[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H[K[52;159H12,16[9CTop[12;6H[46m([8C)[?25h[?25l[m[52;163H5[12;15H[?25h[?25l    (([8C)[52;163H4[12;14H[?25h[?25l[52;163H3[12;13H[?25h[?25l[52;163H2[12;12H[?25h[?25l[52;163H1[12;11H[?25h[?25l[52;163H0[12;10H[?25h[?25l[52;162H9 [12;9H[?25h[?25l[52;162H8[12;8H[?25h[?25l[46m([8C)[m[52;162H7[12;7H[?25h[?25lnpair? l[46ms[m)    (([8Cs[52;162H8[12;8H[?25h[?25lopair? ls)[52;162H9[12;9H[?25h[?25ltpair? ls)[52;162H10[12;10H[?25h[?25l[1m[96mnot[m [1m[96mpair?[m ls)[52;163H1[12;11H[?25h[?25l([1m[96mpair?[m ls)[12;11H[46m([8C)[m[52;163H2[12;12H[?25h[?25l([8C)[52;163H3[12;13H[?25h[?25l[52;163H4[12;14H[?25h[?25l[52;163H5[12;15H[?25h[?25l[52;163H6[12;16H[?25h[?25l[52;163H7[12;17H[?25h[?25l[52;163H8[12;18H[?25h[?25l[52;163H9[12;19H[?25h[?25l[12;11H[46m([8C)[m[52;162H20[12;20H[?25h[?25l[52;163H1[12;21H[?25h[?25l)    ([46m([m[4C([8C)[46m)[m[52;163H2[12;22H[?25h[?25l    (([14C)[52;163H3[12;23H[?25h[?25l[95m0[m[52;163H4[12;24H[?25h[?25l)    [46m([18C)[m[52;163H5[12;25H[?25h[?25l[13;51r[13;1H[L[1;52r[52;159H[K[52;159H13,5[10CTop[12;5H([18C)
    [?25h[?25l([52;162H6[13;6H[?25h[?25le[52;162H7[13;7H[?25h[?25ll[52;162H8[13;8H[?25h[?25ls[52;162H9[13;9H[?25h[?25l[93melse[m[52;162H10[13;10H[?25h[?25l[52;163H1[13;11H[?25h[?25l([52;163H2[13;12H[?25h[?25l[1m[96m+[m[52;163H3[13;13H[?25h[?25l[52;163H4[13;14H[?25h[?25le[52;163H5[13;15H[?25h[?25l[13;14H[K[52;163H4[13;14H[?25h[?25ls[52;163H5[13;15H[?25h[?25lu[52;163H6[13;16H[?25h[?25lm[52;163H7[13;17H[?25h[?25l-[52;163H8[13;18H[?25h[?25ll[52;163H9[13;19H[?25h[?25le[52;162H20[13;20H[?25h[?25ln[52;163H1[13;21H[?25h[?25lg[52;163H2[13;22H[?25h[?25lt[52;163H3[13;23H[?25h[?25lh[52;163H4[13;24H[?25h[?25ls[52;163H5[13;25H[?25h[?25l[52;163H6[13;26H[?25h[?25l([52;163H7[13;27H[?25h[?25lc[52;163H8[13;28H[?25h[?25la[52;163H9[13;29H[?25h[?25l[1m[96mcar[m[52;162H30[13;30H[?25h[?25l[52;163H1[13;31H[?25h[?25ll[52;163H2[13;32H[?25h[?25ls[52;163H3[13;33H[?25h[?25l)[13;26H[46m([6C)[m[52;163H4[13;34H[?25h[?25l[13;26H([6C)[52;163H5[13;35H[?25h[?25l([52;163H6[13;36H[?25h[?25ls[52;163H7[13;37H[?25h[?25lu[52;163H8[13;38H[?25h[?25lm[52;163H9[13;39H[?25h[?25l-[52;162H40[13;40H[?25h[?25ll[52;163H1[13;41H[?25h[?25le[52;163H2[13;42H[?25h[?25ln[52;163H3[13;43H[?25h[?25lg[52;163H4[13;44H[?25h[?25lt[52;163H5[13;45H[?25h[?25lh[52;163H6[13;46H[?25h[?25ls[52;163H7[13;47H[?25h[?25l[52;163H8[13;48H[?25h[?25l([52;163H9[13;49H[?25h[?25ld[52;162H50[13;50H[?25h[?25l[13;49H[K[52;162H49[13;49H[?25h[?25lc[52;162H50[13;50H[?25h[?25ld[52;163H1[13;51H[?25h[?25l[1m[96mcdr[m[52;163H2[13;52H[?25h[?25l[52;163H3[13;53H[?25h[?25ll[52;163H4[13;54H[?25h[?25ls[52;163H5[13;55H[?25h[?25l)[13;48H[46m([6C)[m[52;163H6[13;56H[?25h[?25l)[13;35H[46m([m[12C([6C)[46m)[m[52;163H7[13;57H[?25h[?25l[13;35H([20C)[52;162H14[13;14H[?25h[?25l(sum-lengths ([1m[96mcar[m ls) (sum-lengths ([1m[96mcdr[m ls))[52;163H5[13;15H[?25h[?25l[12C[46m([6C)[m[52;162H3[13;35H[?25h[?25l) (sum-lengths ([1m[96mcdr[m ls))[13;14H[46m([m[12C([6C)[46m)[m[52;163H6[13;36H[?25h[?25l[13;14H([20C) [46m([20C)[m[52;162H59[13;59H[?25h[?25l)[13;11H[46m([m[25C([20C)[46m)[m[52;162H60[13;60H[?25h[?25l)    [46m([m[5C([47C)[46m)[m[52;163H1[13;61H[?25h[?25l)[10;3H[46m([m[13;5H([54C)[46m)[m[52;163H2[13;62H[?25h[?25l)[9;1H[46m([m
  ([13;61H)[46m)[m[52;163H3[13;63H[?25h[52;1H[K[13;62H[?25l[52;149H^[[13;62H[52;149H  [13;63H[52;159H13,62[9CTop[13;62H[?25h[?25l[52;149H:[13;62H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 91L, 2659B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:18:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:19:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:27:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:28:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:37:0
actual:     0
expected:   5
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:38:0
actual:     0
expected:   11
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:39:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:40:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:41:0
actual:     0
expected:   -6
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:66:0
actual:     '()
expected:   '(3 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:67:0
actual:     '()
expected:   '(1 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:68:0
actual:     '()
expected:   '(3 6 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:69:0
actual:     '()
expected:   '(3 6 1 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:76:0
actual:     '()
expected:   '(#t #f #f #t #t #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:78:0
actual:     '()
expected:   '(#t #f #f #t #f #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:87:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:88:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:89:0
actual:     '()
expected:   '(-1 -3 1)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:90:0
actual:     '()
expected:   '(-1 -3)
--------------------
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 91L, 2659B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[106m([m[38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mcond[m
    (([36mnull?[m ls) [31m0[m)
    (([36mnot[m ([36mpair?[m ls)) [31m0[m)
    ([38;5;130melse[m ([36m+[m (sum-lengths ([36mcar[m ls)) (sum-lengths ([36mcdr[m ls)))))[106m)[m


(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([38;5;130mdefine[m (poly-eval x coeffs)
  [31m0[m)

(check-eq? (poly-eval [31m2[m [35m'()[m) [31m0[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m)[m) [31m5[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m)[m) [31m11[m)
(check-eq? (poly-eval [31m2[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m)[m) [31m-1[m)
(check-eq? (poly-eval [31m-1[m [35m'([m[31m5[m[35m [m[31m3[m[35m [m[31m-3[m[35m [m[31m5[m[35m)[m) [31m-6[m)

[34m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([38;5;130mdefine[m greater-than
  ([38;5;130mlambda[m (ls (v [31m0[m))
    ([38;5;130mif[m ([36mnull?[m ls)[51;9H[35m'()[m[52;159H13,62[9CTop[13;62H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H#!/usr/bin/env racket

#lang racket
(require rackunit)

[96m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
[46m([m[93mdefine[m (sum-lengths ls)
  ([93mcond[m
    (([1m[96mnull?[m ls) [95m0[m)
    (([1m[96mnot[m ([1m[96mpair?[m ls)) [95m0[m)
    ([93melse[m ([1m[96m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)))))[46m)[m


(check-eq? (sum-lengths [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Repeat previous exercise where all recursion is tail-recursive[m
([93mdefine[m (sum-lengths-tr ls)
  [95m0[m)

(check-eq? (sum-lengths-tr [38;5;224m'()[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(() ())[m) [95m0[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [95m2[m[38;5;224m) ([m[95m2[m [95m1[m[38;5;224m))[m) [95m4[m)
(check-eq? (sum-lengths-tr [38;5;224m'(([m[95m1[m [38;5;224m(([m[95m2[m[38;5;224m))[m [95m3[m[38;5;224m) (([m[95m2[m [95m1[m[38;5;224m)))[m) [95m4[m)

[96m;;Evaluate polynomial given by list coeffs at x; i.e. return
;; coeffs[0] + coeffs[1]*x + coeffs[2]*x^2 + ...
;; all recursion should be tail-recursive[m
([93mdefine[m (poly-eval x coeffs)
  [95m0[m)

(check-eq? (poly-eval [95m2[m [38;5;224m'()[m) [95m0[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m)[m) [95m5[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m)[m) [95m11[m)
(check-eq? (poly-eval [95m2[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m)[m) [95m-1[m)
(check-eq? (poly-eval [95m-1[m [38;5;224m'([m[95m5[m[38;5;224m [m[95m3[m[38;5;224m [m[95m-3[m[38;5;224m [m[95m5[m[38;5;224m)[m) [95m-6[m)

[96m;;Exercise 2

;;from lab 4:
;;map elements of ls to #t or #f depending on whether or not
;;the element is > v or not > v[m
([93mdefine[m greater-than
  ([93mlambda[m (ls (v [95m0[m))
    ([93mif[m ([1m[96mnull?[m ls)[51;9H[38;5;224m'()[m[52;159H13,62[9CTop"lab5-sol.scm" 91L, 2659B[13;62H[?25h[?25l[9;1H([13;62H)[19;26H[38;5;224m[46m([19C)[m[52;160H9,46[19;46H[?25h[?25l[19;26H[38;5;224m([19C)[m[52;160H8,40[18;40H[?25h[?25l[52;160H3,36[13;36H[?25h[?25l[52;160H5,0-1[15;1H[?25h[?25l[12;11H[46m([8C)[m[52;160H2,11 [12;11H[?25h[?25l[52;149Hi[12;11H[52;149H [12;11H[52;1H[1m-- INSERT --[m[52;13H[K[52;159H12,11[9CTop[12;11H[?25h[?25l([1m[96m[46mp[m[1m[96mair?[m ls)[1C [95m0[m)[12;24H[K[12;10H[46m([m[1m[96mpair?[m ls[46m)[m)[52;163H0[12;10H[?25h[?25lno([1m[96m[46mp[m[1m[96mair?[m ls)[1C [95m0[m)[12;23H[K[12;9H[46m([m[1m[96mpair?[m ls[46m)[m)[52;162H9 [12;9H[?25h[?25l([1m[96m[46mp[m[1m[96mair?[m ls)[1C [95m0[m)[12;22H[K[12;8H[46m([m[1m[96mpair?[m ls[46m)[m)[52;162H8[12;8H[?25h[?25l([1m[96m[46mp[m[1m[96mair?[m ls)[1C [95m0[m)[12;21H[K[12;7H[46m([m[1m[96mpair?[m ls[46m)[m)[52;162H7[12;7H[?25h[?25l[1m[96m[46mp[m[1m[96mair?[m ls)[1C [95m0[m)[12;20H[K[12;6H[46m([m[1m[96mpair?[m ls[46m)[m)[52;162H6[12;6H[?25h[?25l[52;162H7[12;7H[?25h[?25l([8C)[52;162H8[12;8H[?25h[?25l[52;162H9[12;9H[?25h[?25l[52;162H10[12;10H[?25h[?25l[52;163H1[12;11H[?25h[?25l[52;163H2[12;12H[?25h[?25l[52;163H3[12;13H[?25h[?25l[52;163H4[12;14H[?25h[?25l    ([46m([8C)[m[52;163H5[12;15H[?25h[?25l    [46m([m([8C)[46m)[m[52;163H6[12;16H[?25h[?25l[52;163H7[12;17H[?25h[?25l[46m [m[95m0[m)[12;19H[K[12;5H([46m([8C)[m [52;163H6[12;16H[?25h[?25l    (([8C)[52;163H7[12;17H[?25h[?25l    [46m([12C)[m[52;163H8[12;18H[?25h[?25l)[12;18H[K[12;17H[46m)[m[52;163H7[12;17H[?25h[?25l[52;163H8[12;18H[?25h[?25l[12;17H[K[12;5H([52;163H7[12;17H[?25h[?25l[52;160H3[13;17H[?25h[?25l[52;163H6[13;16H[?25h[?25l[46m([20C)[m[52;163H5[13;15H[?25h[?25l[52;163H4[13;14H[?25h[?25l([20C)[52;163H3[13;13H[?25h[?25l[46m([47C)[m[52;163H2[13;12H[?25h[?25l[52;163H1[13;11H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;62H[K[13;10H[46m([m[1m[96m+[m [45C[46m)[m)[52;163H0[13;10H[?25h[?25lels([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;61H[K[13;9H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H9 [13;9H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;60H[K[13;8H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H8[13;8H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;59H[K[13;7H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H7[13;7H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;58H[K[13;6H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H6[13;6H[?25h[?25l[1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;57H[K[13;5H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H5[13;5H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;56H[K[13;4H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H4[13;4H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;55H[K[13;3H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H3[13;3H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;54H[K[13;2H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H2[13;2H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[13;53H[K[13;1H[46m([m[1m[96m+[m [45C[46m)[m)[52;162H1[13;1H[?25h[?25l[12;51r[51;1H
[1;52r[12;1H    (([1m[96mpair?[m ls) ([1m[96m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls))))))
[46m        [m[51;9H([1m[96mcons[m ([1m[96m>[m ([1m[96mcar[m ls) v)[52;159H[K[52;159H12,17[9CTop[12;17H[46m([47C)[m
        [12;17H[?25h[?25l([1m[96m[46m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls)[12;68H[K[12;16H[46m([m[1m[96m+[m [45C[46m)[m)[52;163H6[12;16H[?25h[?25l[46m [m([1m[96m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls[5C)[12;16H [46m([m[46C)[46m)[m[52;163H7[12;17H[?25h[?25l[52;163H8[12;18H[?25h[?25l([47C)[52;163H9[12;19H[?25h[?25l[46m([47C)[m[52;163H8[12;18H[?25h[?25l[52;163H7[12;17H[?25h[?25l    ([46m([8C)[m ([47C)[52;163H6[12;16H[?25h[?25l    (([8C) [46m([47C)[m[52;163H7[12;17H[?25h[?25l[13;51r[13;1H[L[1;52r[12;17H[K[13;6H([1m[96m+[m (sum-lengths ([1m[96mcar[m ls)) (sum-lengths ([1m[96mcdr[m ls))))))[52;159H[K[52;159H13,6[10CTop[13;6H[46m([47C)[m     [?25h[?25l[52;162H7[13;7H[?25h[?25l([47C)[52;162H8[13;8H[?25h[?25l [46m([20C)[m[52;162H9[13;9H[?25h[?25l[52;162H10[13;10H[?25h[?25l([20C)[52;163H1[13;11H[?25h[?25l[52;163H2[13;12H[?25h[?25l[52;163H3[13;13H[?25h[?25l[52;163H4[13;14H[?25h[?25l[52;163H5[13;15H[?25h[?25l[52;163H6[13;16H[?25h[?25l[52;163H7[13;17H[?25h[?25l[52;163H8[13;18H[?25h[?25l[52;163H9[13;19H[?25h[?25l[52;162H20[13;20H[?25h[?25l[52;163H1[13;21H[?25h[?25l [46m([6C)[m[52;163H2[13;22H[?25h[?25l[52;163H3[13;23H[?25h[?25l([6C)[52;163H4[13;24H[?25h[?25l[52;163H5[13;25H[?25h[?25l[52;163H6[13;26H[?25h[?25l[52;163H7[13;27H[?25h[?25l[52;163H8[13;28H[?25h[?25l[46m([6C)[m[52;163H9[13;29H[?25h[?25l[13;9H[46m([m[12C([6C)[46m)[m[52;162H30[13;30H[?25h[?25l[52;163H1[13;31H[?25h[?25l[13;9H([20C) [46m([20C)[m[52;163H2[13;32H[?25h[?25l[52;163H3[13;33H[?25h[?25l([20C)[52;163H4[13;34H[?25h[?25l[52;163H5[13;35H[?25h[?25l[52;163H6[13;36H[?25h[?25l[52;163H7[13;37H[?25h[?25l[52;163H8[13;38H[?25h[?25l[52;163H9[13;39H[?25h[?25l[52;162H40[13;40H[?25h[?25l[52;163H1[13;41H[?25h[?25l[52;163H2[13;42H[?25h[?25l[52;163H3[13;43H[?25h[?25l[52;163H4[13;44H[?25h[?25l [46m([6C)[m[52;163H5[13;45H[?25h[?25l[52;163H6[13;46H[?25h[?25l([6C)[52;163H7[13;47H[?25h[?25l[52;163H8[13;48H[?25h[?25l[52;163H9[13;49H[?25h[?25l[52;162H50[13;50H[?25h[?25l[52;163H1[13;51H[?25h[?25l[46m([6C)[m[52;163H2[13;52H[?25h[?25l[13;32H[46m([m[12C([6C)[46m)[m[52;163H3[13;53H[?25h[?25l     [46m([m[25C([20C)[46m)[m[52;163H4[13;54H[?25h[?25l[12;5H[46m([m[13;6H([47C)[46m)[m[52;163H5[13;55H[?25h[?25l[10;3H[46m([m[12;5H([13;55H)[46m)[m[52;163H6[13;56H[?25h[?25l[9;1H[46m([m
  ([13;56H)[46m)[m[52;163H7[13;57H[?25h[?25l[52;163H8[13;58H[?25h[?25l[13;57H[K[9;1H(
  [46m([13;56H)[m[52;163H7[13;57H[?25h[?25l[13;56H[K[10;3H([12;5H[46m([13;55H)[m[52;163H6[13;56H[?25h[?25l[13;55H[K[12;5H([13;6H[46m([47C)[m[52;163H5[13;55H[?25h[?25l[52;163H4[13;54H[?25h[?25l     ([25C[46m([20C)[m)[52;163H3[13;53H[?25h[?25l[13;32H([12C[46m([6C)[m)[52;163H2[13;52H[?25h[?25l[13;45H([6C)[52;163H1[13;51H[?25h[?25l[46m([6C)[m[52;163H2[13;52H[?25h[?25l[13;32H[46m([m[12C([6C)[46m)[m[52;163H3[13;53H[?25h[?25l     [46m([m[25C([20C)[46m)[m[52;163H4[13;54H[?25h[?25l[52;163H5[13;55H[?25h[?25l)[12;5H[46m([m[13;6H([47C)[46m)[m[52;163H6[13;56H[?25h[?25l[14;51r[14;1H[L[1;52r[52;159H[K[52;159H14,5[10CTop[12;5H([13;55H)
    [?25h[?25l([52;162H6[14;6H[?25h[?25le[52;162H7[14;7H[?25h[?25ll[52;162H8[14;8H[?25h[?25ls[52;162H9[14;9H[?25h[?25l[93melse[m[52;162H10[14;10H[?25h[?25l[52;163H1[14;11H[?25h[?25l[95m0[m[52;163H2[14;12H[?25h[?25l)    [46m([6C)[m[52;163H3[14;13H[?25h[?25l)[10;3H[46m([m[14;5H([6C)[46m)[m[52;163H4[14;14H[?25h[?25l)[9;1H[46m([m
  ([14;13H)[46m)[m[52;163H5[14;15H[?25h[52;1H[K[14;14H[?25l[52;149H^[[14;14H[52;149H  [14;15H[52;159H14,14[9CTop[14;14H[?25h[?25l[52;149HL[14;14H[52;149H [46;1H[9;1H([14;14H)[52;159H46,1 [46;1H[?25h[?25l[52;149Hx[46;1H[52;149H [46;1H[52;149Hdl[46;1H[52;149H  [46;1H[1C[96mfrom lab 4:[m[46;13H[K[46;1H[?25h[?25l[52;149Hi[46;1H[52;149H [46;1H[52;1H[1m-- INSERT --[m[52;159H[K[52;159H46,1[10CTop[46;1H[?25h[?25l[1C[96m;from lab 4:[m[52;162H2[46;2H[?25h[?25l[52;160H5,1[45;1H[?25h[52;1H[K[45;1H[?25l[52;149H^[[45;1H[52;149H  [45;1H[52;159H45,0-1[8CTop[45;1H[?25h[?25l[52;149H:[45;1H[52;149H[K[52;1H:[?25hx[?25l[?1006l[?1002l[?2004l[>4;m"lab5-sol.scm" 92L, 2659B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ vim lab5-sol.scm [2P./[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:19:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:20:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:28:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:29:0
actual:     0
expected:   4
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:38:0
actual:     0
expected:   5
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:39:0
actual:     0
expected:   11
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:40:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:41:0
actual:     0
expected:   -1
--------------------
--------------------
FAILURE
name:       check-eq?
location:   lab5-sol.scm:42:0
actual:     0
expected:   -6
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:67:0
actual:     '()
expected:   '(3 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:68:0
actual:     '()
expected:   '(1 2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:69:0
actual:     '()
expected:   '(3 6 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:70:0
actual:     '()
expected:   '(3 6 1 8)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:77:0
actual:     '()
expected:   '(#t #f #f #t #t #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:79:0
actual:     '()
expected:   '(#t #f #f #t #f #f)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:88:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:89:0
actual:     '()
expected:   '(-2)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:90:0
actual:     '()
expected:   '(-1 -3 1)
--------------------
--------------------
FAILURE
name:       check-equal?
location:   lab5-sol.scm:91:0
actual:     '()
expected:   '(-1 -3)
--------------------
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ ./lab5-sol.scm [2@vim [C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"lab5-sol.scm" 92L, 2659B[2;1Hâ–½[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#!/usr/bin/env racket[2;1H[K[3;1H#lang racket[3;13H[K[4;1H(require rackunit)

[34m;;Exercise 1
;;Given a proper-list list of proper-lists, return the sum of the
;;lengths of all the top-level contained lists.[m
([38;5;130mdefine[m (sum-lengths ls)
  ([38;5;130mcond[m
    (([36mnull?[m ls) [31m0[m)
    (([36mpair?[m ls)[13;6H([36m+[m (sum-lengths ([36mcar[m ls)) (sum-lengths ([36mcdr[m ls))))
    ([38;5;130melse[m [31m0[m)))


(check-eq? (sum-lengths [35m'()[m) [31m0[m)
(check-eq? (sum-lengths [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths [35m'(([m[31m1[m [35m(([m[31m2[m[35m))[m [31m3[m[35m) (([m[31m2[m [31m1[m[35m)))[m) [31m4[m)

[34m;;Repeat previous exercise where all recursion is tail-recursive[m
([38;5;130mdefine[m (sum-lengths-tr ls)
  [31m0[m)

(check-eq? (sum-lengths-tr [35m'()[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(() ())[m) [31m0[m)
(check-eq? (sum-lengths-tr [35m'(([m[31m1[m [31m2[m[35m) ([m[31m2[m [31m1[m[35m))[m) [31m4[m)
(check-eq? (sum-lengths-tr Script started on 2022-03-03 10:14:02-05:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="176" LINES="52"]
[?2004hdwalcot1@remote00:~/i471a/submit/lab5$ [?2004l
exit

Script done on 2022-03-03 10:14:08-05:00 [COMMAND_EXIT_CODE="0"]
